Event Description 1: 
withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).

withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).

initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).

terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).

initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).

terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).

initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).

terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).

initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).

terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).

holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).

holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).

holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).

holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).

holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).

holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).

holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.


Event Description 2: 
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).


Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1.   1.   0.  ]
 [1.   0.25 0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1.   1.   0.  ]
 [1.   0.25 0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1.  1.  0. ]
 [1.  1.  0. ]
 [1.  0.5 0. ]]
Optimal Body Condition Assignment: 
[2 0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.875

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1.  1.  0. ]
 [1.  1.  0. ]
 [1.  0.5 0. ]]
Optimal Body Condition Assignment: 
[2 0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.875

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  0.5 1. ]
 [0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[1.  1.  1. ]
 [1.  1.  1. ]
 [1.  1.  0.5]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.875

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  0.5]
 [0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[0 1 3 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  0.5 0.5 1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  0.5]
 [0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[0 1 3 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInteres(Vessel,AreaType,AreaID) :- 
	entersArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(leavesArea(Vessel,AreaID)).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[entersArea(Vessel,AreaID), areaType(AreaID,AreaType), -(leavesArea(Vessel,AreaID)), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1.   1.   0.  ]
 [1.   0.25 0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1.   1.   0.  ]
 [1.   0.25 0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1.  1.  0. ]
 [1.  1.  0. ]
 [1.  0.5 0. ]]
Optimal Body Condition Assignment: 
[2 0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.875

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1.  1.  0. ]
 [1.  1.  0. ]
 [1.  0.5 0. ]]
Optimal Body Condition Assignment: 
[2 0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.875

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  0.5 1. ]
 [0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[1.  1.  1. ]
 [1.  1.  1. ]
 [1.  1.  0.5]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.875

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  0.5]
 [0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[0 1 3 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  0.5 0.5 1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  0.5]
 [0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[0 1 3 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID))]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 withinAreaOfInterest(Vessel,AreaType,AreaID) :- 
	leavesArea(Vessel,AreaID),
	areaType(AreaID,AreaType),
	-(entersArea(Vessel,AreaID)).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[leavesArea(Vessel,AreaID), areaType(AreaID,AreaType), -(entersArea(Vessel,AreaID)), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.5

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.41666666666666663

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.41666666666666663

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(stop_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T)]
[happensAt(slow_motion_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(slow_motion_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T)]
[happensAt(change_in_speed_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(change_in_speed_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7857142857142857

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T)]
[happensAt(change_in_heading(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
0.25
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T), _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.125

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(stop_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[happensAt(slow_motion_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(slow_motion_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[happensAt(change_in_speed_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(change_in_speed_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[happensAt(change_in_heading(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(communicationGap(Vessel),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   0.25 0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   0.25 0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   0.25]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.625
Distance between rules: 
0.55

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   0.25]
 [1.   1.   1.   1.   0.5  1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 5 4 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.6666666666666666
Distance between rules: 
0.6071428571428571

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   0.25]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 4 1 2 3]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.7000000000000001
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   0.25 0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	holdsAt(withinArea(Vessel,nearCoast),T),
	>(Speed,5).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), holdsAt(withinArea(Vessel,nearCoast),T), >(Speed,5), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25  1.    0.   ]
 [1.    0.125 0.   ]
 [1.    1.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.375
Distance between rule bodies: 
0.4583333333333333
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25  1.    0.   ]
 [1.    0.125 0.   ]
 [1.    1.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.375
Distance between rule bodies: 
0.4583333333333333
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   0.5  1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1 3]
Sum of distances for optimal body condition assignment: 
1.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   0.5 ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.75
Distance between rule bodies: 
0.5833333333333333
Distance between rules: 
0.49999999999999994

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   0.5  1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 4 2 3 5]
Sum of distances for optimal body condition assignment: 
1.75
Distance between rule bodies: 
0.7916666666666666
Distance between rules: 
0.8214285714285714

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   0.5 ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
1.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.6000000000000001

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  0.5 0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[0 2 1 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   0.5 ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
1.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.6000000000000001

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	-(holdsAt(withinArea(Vessel,nearCoast),T)),
	>(Speed,5).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), -(holdsAt(withinArea(Vessel,nearCoast),T)), >(Speed,5), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 4 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 4 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(gap_start(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 4 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 4 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(gap_end(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 4 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 4 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(stop_end(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(slow_motion_start(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(slow_motion_end(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(change_in_speed_start(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(change_in_speed_end(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T), _]
5
4
Body atom distances: 
[[0.25 1.   1.   1.   0.  ]
 [0.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[4 0 2 1 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.7083333333333333

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _, _]
5
3
Body atom distances: 
[[0.25 1.   1.   0.   0.  ]
 [0.   1.   1.   0.   0.  ]
 [1.   1.   1.   0.   0.  ]
 [1.   1.   1.   0.   0.  ]
 [1.   1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[3 0 4 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
5
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.7083333333333333

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max), _]
5
4
Body atom distances: 
[[0.25 1.   1.   1.   0.  ]
 [0.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[4 0 2 1 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.7083333333333333

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf), _]
5
4
Body atom distances: 
[[0.25 1.   1.   1.   0.  ]
 [0.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[4 0 2 1 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.7083333333333333

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _, _]
5
3
Body atom distances: 
[[0.25 1.   1.   0.   0.  ]
 [0.   1.   1.   0.   0.  ]
 [1.   1.   1.   0.   0.  ]
 [1.   1.   1.   0.   0.  ]
 [1.   1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[3 0 4 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I), _]
5
4
Body atom distances: 
[[1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[4 1 0 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
5
Body atom distances: 
[[0.25    1.      1.      1.      1.      1.     ]
 [0.09375 1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.5     1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.5     1.     ]
 [0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[1 0 4 2 3 5]
Sum of distances for optimal body condition assignment: 
3.59375
Distance between rule bodies: 
0.765625
Distance between rules: 
0.6919642857142857

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr), _]
5
4
Body atom distances: 
[[0.25    1.      1.      1.      0.     ]
 [0.09375 1.      1.      1.      0.     ]
 [1.      1.      1.      1.      0.     ]
 [1.      1.      1.      1.      0.     ]
 [1.      1.      1.      1.      0.     ]]
Optimal Body Condition Assignment: 
[4 0 2 1 3]
Sum of distances for optimal body condition assignment: 
3.09375
Distance between rule bodies: 
0.8187500000000001
Distance between rules: 
0.8489583333333333

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25    0.      0.      0.      0.     ]
 [0.09375 0.      0.      0.      0.     ]
 [1.      0.      0.      0.      0.     ]
 [1.      0.      0.      0.      0.     ]
 [1.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[1 0 3 4 2]
Sum of distances for optimal body condition assignment: 
0.09375
Distance between rule bodies: 
0.8187500000000001
Distance between rules: 
0.8489583333333333

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold), _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax), _]
5
4
Body atom distances: 
[[0.25 1.   1.   1.   0.  ]
 [0.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[4 0 2 1 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.7083333333333333

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax)), _]
5
4
Body atom distances: 
[[0.25 1.   1.   1.   0.  ]
 [0.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[4 0 2 1 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold), _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold), _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
5
Body atom distances: 
[[0.25    1.      1.      1.      1.     ]
 [0.03125 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4]
Sum of distances for optimal body condition assignment: 
4.03125
Distance between rule bodies: 
0.80625
Distance between rules: 
0.7135416666666666

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax)), _]
5
4
Body atom distances: 
[[0.25    1.      1.      1.      0.     ]
 [0.03125 1.      1.      1.      0.     ]
 [1.      1.      1.      1.      0.     ]
 [1.      1.      1.      1.      0.     ]
 [1.      1.      1.      1.      0.     ]]
Optimal Body Condition Assignment: 
[4 0 2 1 3]
Sum of distances for optimal body condition assignment: 
3.03125
Distance between rule bodies: 
0.80625
Distance between rules: 
0.8385416666666666

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 4 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
5
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _, _]
5
3
Body atom distances: 
[[0.25 1.   1.   0.   0.  ]
 [0.   1.   1.   0.   0.  ]
 [1.   1.   1.   0.   0.  ]
 [1.   1.   1.   0.   0.  ]
 [1.   1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[3 0 4 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.7083333333333333

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _, _]
5
3
Body atom distances: 
[[0.25 1.   1.   0.   0.  ]
 [0.   1.   1.   0.   0.  ]
 [1.   1.   1.   0.   0.  ]
 [1.   1.   1.   0.   0.  ]
 [1.   1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[3 0 4 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(change_in_heading(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
0.25
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold)]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I), _]
5
4
Body atom distances: 
[[1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[4 1 0 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold), _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(driftingVessel(Vessel),T) :- 
	happensAt(courseOverGround(Vessel,COG),T),
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	>(Speed,0),
	threshold(cogThreshold,COGThreshold),
	>(abs(-(COG,COGThreshold)),driftThreshold).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(courseOverGround(Vessel,COG),T), happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), >(Speed,0), threshold(cogThreshold,COGThreshold), >(abs(-(COG,COGThreshold)),driftThreshold), _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(stop_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(slow_motion_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(slow_motion_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(change_in_speed_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(change_in_speed_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
2
Body atom distances: 
[[0. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.75
Distance between rules: 
0.8

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
2
Body atom distances: 
[[0. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.6666666666666666
Distance between rules: 
0.5625

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
2
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
2
Body atom distances: 
[[0. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.75
Distance between rules: 
0.8

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
2
Body atom distances: 
[[0. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.75
Distance between rules: 
0.8

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
2
Body atom distances: 
[[0. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.6666666666666666
Distance between rules: 
0.5625

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
2
Body atom distances: 
[[0.09375 1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.09375
Distance between rule bodies: 
0.8489583333333333
Distance between rules: 
0.8705357142857142

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
2
Body atom distances: 
[[0.09375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [0.      0.      0.      0.     ]
 [0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.09375
Distance between rule bodies: 
0.7734375
Distance between rules: 
0.6687500000000001

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
2
1
Body atom distances: 
[[0.09375 0.     ]
 [1.      0.     ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.09375
Distance between rule bodies: 
0.546875
Distance between rules: 
0.44791666666666663

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(end(=(underWay(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
2
Body atom distances: 
[[0. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.75
Distance between rules: 
0.8

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
2
Body atom distances: 
[[0. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.75
Distance between rules: 
0.65

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
2
Body atom distances: 
[[0.03125 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.03125
Distance between rule bodies: 
0.80625
Distance between rules: 
0.8385416666666666

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
2
Body atom distances: 
[[0.03125 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [0.      0.      0.      0.     ]
 [0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.03125
Distance between rule bodies: 
0.7578125
Distance between rules: 
0.65625

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
2
Body atom distances: 
[[0. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.6666666666666666
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
2
Body atom distances: 
[[0. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.6666666666666666
Distance between rules: 
0.5625

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(change_in_heading(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(driftingVessel(Vessel),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	=(Speed,0).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T), =(Speed,0), _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(stop_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(slow_motion_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(slow_motion_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(change_in_speed_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(change_in_speed_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _]
4
3
Body atom distances: 
[[0.25 1.   1.   0.  ]
 [0.25 1.   1.   0.  ]
 [1.   1.   1.   0.  ]
 [1.   1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[3 0 2 1]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
4
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _]
4
3
Body atom distances: 
[[0.25 1.   1.   0.  ]
 [0.25 1.   1.   0.  ]
 [1.   1.   1.   0.  ]
 [1.   1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[3 0 2 1]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle), _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
4
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7857142857142857

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle), _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle), _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
4
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[2 0 3 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle), _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _]
4
3
Body atom distances: 
[[0.25 1.   1.   0.  ]
 [0.25 1.   1.   0.  ]
 [1.   1.   1.   0.  ]
 [1.   1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[3 0 2 1]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _]
4
3
Body atom distances: 
[[0.25 1.   1.   0.  ]
 [0.25 1.   1.   0.  ]
 [1.   1.   1.   0.  ]
 [1.   1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[3 0 2 1]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(change_in_heading(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
0.25
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 3 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle)]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle), _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(trawling(Vessel),T) :- 
	happensAt(speed(Vessel,Speed),T),
	happensAt(headingAngle(Vessel,Angle),T),
	>=(Speed,minTrawlingSpeed),
	angleDistribution(Angle).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(speed(Vessel,Speed),T), happensAt(headingAngle(Vessel,Angle),T), >=(Speed,minTrawlingSpeed), angleDistribution(Angle), _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T), _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(stop_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T)]
[happensAt(slow_motion_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(slow_motion_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T)]
[happensAt(change_in_speed_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(change_in_speed_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T)]
[happensAt(change_in_heading(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T)]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[happensAt(stopTrawling(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.25

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(trawling(Vessel),T) :- 
	happensAt(stopTrawling(Vessel),T).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(stopTrawling(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[0.125 0.375 0.375 1.   ]
 [0.375 0.125 0.375 1.   ]
 [1.    1.    1.    1.   ]
 [0.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.5625
Distance between rules: 
0.4625

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [1.     1.     0.375  1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.7232142857142857
Distance between rules: 
0.640625

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     0.5    1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 4 6 1 2 3 5 7 8]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.7916666666666666
Distance between rules: 
0.71875

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[0.3125 1.     1.     0.3125 0.3125 0.375  0.375  1.     1.     1.
  1.     0.3125 0.3125 0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     0.3125 0.3125 0.375  0.375  1.     1.     1.
  1.     0.3125 0.3125 0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     0.5
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 0  3  9  1  2  4  5  6  7  8 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.8958333333333333
Distance between rules: 
0.8519736842105262

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
0
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     0.375  1.     1.    ]
 [0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.6000000000000001
Distance between rules: 
0.5

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[0.3125 0.3125 1.     1.    ]
 [0.3125 0.3125 1.     1.    ]
 [1.     1.     0.375  1.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.41250000000000003

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 3 1 2 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.828125
Distance between rules: 
0.7430555555555555

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlerSpeed(Vessel),true),I1),
	holdsFor(=(wideHeadingAngle(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlerSpeed(Vessel),true),I1), holdsFor(=(wideHeadingAngle(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[0.3125 1.     0.3125 0.3125 0.375  0.375  1.     1.     1.     1.
  0.3125 0.3125 1.    ]
 [0.3125 1.     0.3125 0.3125 0.375  0.375  1.     1.     1.     1.
  0.3125 0.3125 1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     0.5    1.
  1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 0  2  8  1  3  4  5  6  7  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.8557692307692308
Distance between rules: 
0.7991071428571428

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
0.0625
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[0.125 0.375 0.375 1.   ]
 [0.375 0.125 0.375 1.   ]
 [1.    1.    1.    0.25 ]
 [0.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 3 2]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.375
Distance between rules: 
0.3125

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
0
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [1.     1.     1.     1.     0.375  1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[1 0 4 2 3 5 6]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.7232142857142857
Distance between rules: 
0.6328125

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 4 1 2 3 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.8472222222222222
Distance between rules: 
0.76875

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[0.3125 1.     1.     0.3125 0.3125 0.375  0.375  1.     1.     1.
  1.     0.3125 0.3125 0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     0.3125 0.3125 0.375  0.375  1.     1.     1.
  1.     0.3125 0.3125 0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.375  0.375  1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 0  3  7  1  2  4  5  6  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.8888888888888888
Distance between rules: 
0.8453947368421052

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.7250000000000001
Distance between rules: 
0.6145833333333334

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
0.0625
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[0.3125 0.3125 1.     1.    ]
 [0.3125 0.3125 1.     1.    ]
 [1.     1.     1.     1.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.65625
Distance between rules: 
0.5375

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     0.375  1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 3 2 1 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.75
Distance between rules: 
0.673611111111111

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(anchorLowered(Vessel),true),I1),
	holdsFor(=(vesselMoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(anchorLowered(Vessel),true),I1), holdsFor(=(vesselMoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[0.3125 1.     0.3125 0.3125 0.375  0.375  1.     1.     1.     1.
  0.3125 0.3125 1.    ]
 [0.3125 1.     0.3125 0.3125 0.375  0.375  1.     1.     1.     1.
  0.3125 0.3125 1.    ]
 [1.     1.     1.     1.     1.     1.     0.375  0.375  1.     1.
  1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 0  2  6  1  3  4  5  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.8461538461538463
Distance between rules: 
0.7901785714285715

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
0.125
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[0.125 0.375 0.375 1.   ]
 [0.375 0.125 0.375 1.   ]
 [1.    1.    1.    0.25 ]
 [0.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 3 2]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.375
Distance between rules: 
0.325

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [1.     1.     1.     1.     0.375  1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[1 0 4 2 3 5 6]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.7232142857142857
Distance between rules: 
0.640625

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
0.125
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 4 1 2 3 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.8472222222222222
Distance between rules: 
0.775

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
0.125
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[0.3125 1.     1.     0.3125 0.3125 0.375  0.375  1.     1.     1.
  1.     0.3125 0.3125 0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     0.3125 0.3125 0.375  0.375  1.     1.     1.
  1.     0.3125 0.3125 0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.375  0.375  1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 0  3  7  1  2  4  5  6  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.8888888888888888
Distance between rules: 
0.8486842105263157

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
0.125
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.7250000000000001
Distance between rules: 
0.625

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
0.125
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[0.3125 0.3125 1.     1.    ]
 [0.3125 0.3125 1.     1.    ]
 [1.     1.     1.     1.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.65625
Distance between rules: 
0.55

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
0.125
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     0.375  1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 3 2 1 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.75
Distance between rules: 
0.6805555555555555

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),false),I) :- 
	holdsFor(=(anchorRaised(Vessel),true),I1),
	holdsFor(=(vesselUnmoored(Vessel),true),I2),
	union_all(list(I1,I2),I).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
0.125
[holdsFor(=(anchorRaised(Vessel),true),I1), holdsFor(=(vesselUnmoored(Vessel),true),I2), union_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[0.3125 1.     0.3125 0.3125 0.375  0.375  1.     1.     1.     1.
  0.3125 0.3125 1.    ]
 [0.3125 1.     0.3125 0.3125 0.375  0.375  1.     1.     1.     1.
  0.3125 0.3125 1.    ]
 [1.     1.     1.     1.     1.     1.     0.375  0.375  1.     1.
  1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 0  2  6  1  3  4  5  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.8461538461538463
Distance between rules: 
0.7946428571428572

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[0.125 0.375 0.375 1.   ]
 [0.375 0.125 0.375 1.   ]
 [1.    1.    1.    1.   ]
 [0.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.5625
Distance between rules: 
0.4625

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [1.     1.     0.375  1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.7232142857142857
Distance between rules: 
0.640625

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     0.5    1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 4 6 1 2 3 5 7 8]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.7916666666666666
Distance between rules: 
0.71875

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[0.3125  1.      1.      0.3125  0.3125  0.375   0.375   1.      1.
  1.      1.      0.3125  0.3125  0.3125  0.3125  1.      1.      1.     ]
 [0.3125  1.      1.      0.28125 0.28125 0.375   0.375   1.      1.
  1.      1.      0.3125  0.3125  0.3125  0.3125  1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  0.5     1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[ 0  3  9  1  2  4  5  6  7  8 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.09375
Distance between rule bodies: 
0.8940972222222222
Distance between rules: 
0.850328947368421

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     0.375  1.     1.    ]
 [0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.6000000000000001
Distance between rules: 
0.5104166666666667

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[0.3125 0.3125 1.     1.    ]
 [0.3125 0.3125 1.     1.    ]
 [1.     1.     0.375  1.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.41250000000000003

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [0.25   0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[3 0 1 2 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.5625
Distance between rule bodies: 
0.8203125
Distance between rules: 
0.736111111111111

Comparing rules:
 holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(=(closeToTugBoat(Vessel),true),I1),
	holdsFor(=(lowSpeed(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToTugBoat(Vessel),true),I1), holdsFor(=(lowSpeed(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[0.3125  1.      0.3125  0.3125  0.375   0.375   1.      1.      1.
  1.      0.3125  0.3125  1.     ]
 [0.3125  1.      0.28125 0.28125 0.375   0.375   1.      1.      1.
  1.      0.3125  0.3125  1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      0.5
  1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[ 0  2  8  1  3  4  5  6  7  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.09375
Distance between rule bodies: 
0.8533653846153847
Distance between rules: 
0.7968750000000001

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[0.125 0.375 0.375 1.   ]
 [0.375 0.125 0.375 1.   ]
 [1.    1.    1.    1.   ]
 [0.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.5625
Distance between rules: 
0.4625

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [1.     1.     0.375  1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.7232142857142857
Distance between rules: 
0.640625

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     0.5    1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 4 6 1 2 3 5 7 8]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.7916666666666666
Distance between rules: 
0.71875

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[0.3125 1.     1.     0.3125 0.3125 0.375  0.375  1.     1.     1.
  1.     0.3125 0.3125 0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     0.3125 0.3125 0.375  0.375  1.     1.     1.
  1.     0.3125 0.3125 0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     0.5
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 0  3  9  1  2  4  5  6  7  8 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.8958333333333333
Distance between rules: 
0.8519736842105262

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     0.375  1.     1.    ]
 [0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.6000000000000001
Distance between rules: 
0.5104166666666667

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[0.3125 0.3125 1.     1.    ]
 [0.3125 0.3125 1.     1.    ]
 [1.     1.     0.375  1.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.41250000000000003

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 3 1 2 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.828125
Distance between rules: 
0.7430555555555555

Comparing rules:
 holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(=(closeToPilotBoat(Vessel),true),I1),
	holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(closeToPilotBoat(Vessel),true),I1), holdsFor(=(experiencedSailorOnBoard(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[0.3125 1.     0.3125 0.3125 0.375  0.375  1.     1.     1.     1.
  0.3125 0.3125 1.    ]
 [0.3125 1.     0.3125 0.3125 0.375  0.375  1.     1.     1.     1.
  0.3125 0.3125 1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     0.5    1.
  1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 0  2  8  1  3  4  5  6  7  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.8557692307692308
Distance between rules: 
0.7991071428571428

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(stop_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(slow_motion_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(slow_motion_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(change_in_speed_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(change_in_speed_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
0.0625
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
4
Body atom distances: 
[[0.125 0.375 0.375 1.   ]
 [0.375 0.125 0.375 1.   ]
 [0.375 0.375 0.125 1.   ]
 [1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.34375
Distance between rules: 
0.28750000000000003

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I), _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
4
Body atom distances: 
[[0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [1.     1.     0.5    1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[1 0 3 2 4 5 6]
Sum of distances for optimal body condition assignment: 
1.5625
Distance between rule bodies: 
0.6517857142857143
Distance between rules: 
0.578125

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I), _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
4
Body atom distances: 
[[0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     0.375  1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 4 5 6 1 2 3 7 8]
Sum of distances for optimal body condition assignment: 
1.3125
Distance between rule bodies: 
0.7013888888888888
Distance between rules: 
0.6375000000000001

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I), _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
4
Body atom distances: 
[[0.3125 1.     1.     0.3125 0.3125 0.375  0.375  1.     1.     1.
  1.     0.3125 0.3125 0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     0.3125 0.3125 0.375  0.375  1.     1.     1.
  1.     0.3125 0.3125 0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     0.3125 0.3125 0.375  0.375  1.     1.     1.
  1.     0.3125 0.3125 0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     0.375
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 0  3  4  9  1  2  5  6  7  8 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.3125
Distance between rule bodies: 
0.8506944444444444
Distance between rules: 
0.8092105263157894

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I), _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
4
Body atom distances: 
[[0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     0.5    1.     1.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 3 2 4]
Sum of distances for optimal body condition assignment: 
2.125
Distance between rule bodies: 
0.625
Distance between rules: 
0.53125

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(change_in_heading(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
0.0625
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I)]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
4
Body atom distances: 
[[0.3125 0.3125 1.     1.    ]
 [0.3125 0.3125 1.     1.    ]
 [0.3125 0.3125 1.     1.    ]
 [1.     1.     0.5    1.    ]]
Optimal Body Condition Assignment: 
[0 1 3 2]
Sum of distances for optimal body condition assignment: 
2.125
Distance between rule bodies: 
0.53125
Distance between rules: 
0.4375

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I), _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
4
Body atom distances: 
[[0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 3 4 1 2 5 6 7]
Sum of distances for optimal body condition assignment: 
1.9375
Distance between rule bodies: 
0.7421875
Distance between rules: 
0.6666666666666666

Comparing rules:
 holdsFor(=(vesselRendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(nearby(Vessel1,Vessel2),true),I1),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3),
	intersect_all(list(I1,I2,I3),I).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(nearby(Vessel1,Vessel2),true),I1), holdsFor(=(stoppedOrLowSpeed(Vessel1),true),I2), holdsFor(=(stoppedOrLowSpeed(Vessel2),true),I3), intersect_all(list(I1,I2,I3),I), _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
4
Body atom distances: 
[[0.3125 1.     0.3125 0.3125 0.375  0.375  1.     1.     1.     1.
  0.3125 0.3125 1.    ]
 [0.3125 1.     0.3125 0.3125 0.375  0.375  1.     1.     1.     1.
  0.3125 0.3125 1.    ]
 [0.3125 1.     0.3125 0.3125 0.375  0.375  1.     1.     1.     1.
  0.3125 0.3125 1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     0.375  1.
  1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 0  2  3  8  1  4  5  6  7  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.3125
Distance between rule bodies: 
0.7932692307692308
Distance between rules: 
0.7410714285714285

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
0.0625
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[0.125 0.375 0.375 1.   ]
 [0.375 0.125 0.375 1.   ]
 [1.    1.    1.    1.   ]
 [0.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.5625
Distance between rules: 
0.4625

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [0.375  0.3125 1.     0.375  1.     1.     1.    ]
 [1.     1.     0.375  1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.7232142857142857
Distance between rules: 
0.640625

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     0.5    1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 4 6 1 2 3 5 7 8]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.7916666666666666
Distance between rules: 
0.71875

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[0.3125 1.     1.     0.3125 0.3125 0.375  0.375  1.     1.     1.
  1.     0.3125 0.3125 0.3125 0.3125 1.     1.     1.    ]
 [0.3125 1.     1.     0.3125 0.3125 0.375  0.375  1.     1.     1.
  1.     0.3125 0.3125 0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     0.5
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 0  3  9  1  2  4  5  6  7  8 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.8958333333333333
Distance between rules: 
0.8519736842105262

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     0.375  1.     1.    ]
 [0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.6000000000000001
Distance between rules: 
0.5104166666666667

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
0.0625
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[0.3125 0.3125 1.     1.    ]
 [0.3125 0.3125 1.     1.    ]
 [1.     1.     0.375  1.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.41250000000000003

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
0
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [0.3125 0.375  1.     0.3125 0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 3 1 2 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.828125
Distance between rules: 
0.736111111111111

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(inAreaForLongPeriod(Vessel),true),I1),
	holdsFor(=(noEvidentPurpose(Vessel),true),I2),
	intersect_all(list(I1,I2),I).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(inAreaForLongPeriod(Vessel),true),I1), holdsFor(=(noEvidentPurpose(Vessel),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[0.3125 1.     0.3125 0.3125 0.375  0.375  1.     1.     1.     1.
  0.3125 0.3125 1.    ]
 [0.3125 1.     0.3125 0.3125 0.375  0.375  1.     1.     1.     1.
  0.3125 0.3125 1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     0.5    1.
  1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 0  2  8  1  3  4  5  6  7  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.8557692307692308
Distance between rules: 
0.7991071428571428

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Rule distances: 
[[0.8125 0.8125 1.     ... 1.     1.     1.    ]
 [0.8125 0.8125 1.     ... 1.     1.     1.    ]
 [0.5    0.75   0.5    ... 1.     1.     1.    ]
 ...
 [1.     1.     1.     ... 1.     1.     1.    ]
 [1.     1.     1.     ... 1.     1.     1.    ]
 [1.     1.     1.     ... 1.     1.     1.    ]]
Optimal Rule Assignment: 
[ 0  1 10  5  3 22 25 27  4  2 41 24 49 50 29 33 48  6  7  8  9 11 12 13
 14 15 16 17 18 19 20 21 23 26 28 30 31 32 34 35 36 37 38 39 40 42 43 44
 45 46 47]
Sum of distances for optimal rule assignment: 
43.007936507936506
Distance between event descriptions: 
0.8432928727046374
Event Description Similarity: 
0.15670712729536262
