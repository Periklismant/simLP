Event Description 1: 
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).


Event Description 2: 
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.


Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.0625 1.    ]
 [1.     0.25  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.15625
Distance between rules: 
0.10416666666666666

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.25]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.25
Distance between rules: 
0.5

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.765625

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.25]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.25
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.0625 1.    ]
 [1.     0.25  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.15625
Distance between rules: 
0.10416666666666666

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.41666666666666663

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.015625
[happensAt(gap_start(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.421875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.015625
[happensAt(gap_start(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0078125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0. 0.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.35416666666666663

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
2
Body atom distances: 
[[1.     1.     1.    ]
 [0.125  0.0625 1.    ]
 [0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.546875

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1.    1.   ]
 [0.125 1.   ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.5625
Distance between rules: 
0.7083333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1.     1.    ]
 [0.125  0.0625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.53125
Distance between rules: 
0.6875

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0. 0.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.35416666666666663

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.78125

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1.      1.     ]
 [1.      0.03125]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.03125
Distance between rule bodies: 
0.515625
Distance between rules: 
0.6770833333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(gap_end(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.03125

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.0625
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.125
Distance between rules: 
0.10416666666666666

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
2
Body atom distances: 
[[1.     1.     1.    ]
 [0.125  0.0625 1.    ]
 [0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.546875

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1.    1.   ]
 [0.125 1.   ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.5625
Distance between rules: 
0.7083333333333333

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1.     1.    ]
 [0.125  0.0625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.53125
Distance between rules: 
0.6875

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.0625
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.125
Distance between rules: 
0.10416666666666666

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.78125

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1.      1.     ]
 [1.      0.03125]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.03125
Distance between rule bodies: 
0.515625
Distance between rules: 
0.6770833333333333

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(stop_end(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(stop_end(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(stop_end(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.125
[happensAt(stop_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.125
[happensAt(stop_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.125
[happensAt(stop_end(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(stop_end(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(stop_end(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_start(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(slow_motion_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(slow_motion_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_start(Vessel),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.765625

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_start(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_start(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_end(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_end(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(slow_motion_end(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_end(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_end(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_end(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_Status)),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_start(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(change_in_speed_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(change_in_speed_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_start(Vessel),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.765625

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_start(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_start(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_end(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_end(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(change_in_speed_end(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_end(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_end(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_end(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_Status)),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25     1.       0.       0.      ]
 [1.       1.       0.       0.      ]
 [1.       1.       0.       0.      ]
 [1.       0.015625 0.       0.      ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
0.265625
Distance between rule bodies: 
0.56640625
Distance between rules: 
0.478125

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   0.5  0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
0.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.5750000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _]
4
3
Body atom distances: 
[[1.     1.     1.     0.    ]
 [1.     1.     1.     0.    ]
 [1.     1.     1.     0.    ]
 [0.125  0.0625 1.     0.    ]]
Optimal Body Condition Assignment: 
[3 2 0 1]
Sum of distances for optimal body condition assignment: 
2.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.6125

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1.    1.    0.    0.   ]
 [1.    1.    0.    0.   ]
 [1.    0.5   0.    0.   ]
 [0.125 1.    0.    0.   ]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
0.625
Distance between rule bodies: 
0.65625
Distance between rules: 
0.7250000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1.     1.     0.     0.    ]
 [1.     1.     0.     0.    ]
 [1.     1.     0.     0.    ]
 [0.125  0.0625 0.     0.    ]]
Optimal Body Condition Assignment: 
[2 3 0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.7232142857142857

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
3
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.8571428571428571

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
3
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.6770833333333333

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
3
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.6770833333333333

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6666666666666666

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6666666666666666

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(gap_start(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(gap_end(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _, _]
5
3
Body atom distances: 
[[1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8541666666666666

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation), _]
5
4
Body atom distances: 
[[0.25 1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 4 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation), _]
5
4
Body atom distances: 
[[0.25 1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 4 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
5
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.7321428571428571

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
5
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
5
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _]
5
3
Body atom distances: 
[[1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min), _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _]
5
4
Body atom distances: 
[[1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[4 1 0 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
5
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min), _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _]
5
3
Body atom distances: 
[[1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8250000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.7321428571428571

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8250000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.7321428571428571

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   0.5  0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.75
Distance between rule bodies: 
0.5833333333333333
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _]
3
2
Body atom distances: 
[[1.  1.  0. ]
 [1.  1.  0. ]
 [1.  0.5 0. ]]
Optimal Body Condition Assignment: 
[2 0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.65625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.78125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
3
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.8571428571428571

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
3
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
3
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[0.125 0.375 1.    0.   ]
 [0.375 0.125 1.    0.   ]
 [0.375 0.375 1.    0.   ]
 [1.    1.    1.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 3 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.5625
Distance between rules: 
0.4625

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0.0625
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[0.375 0.375 1.    0.375 1.    1.    1.   ]
 [0.375 0.375 1.    0.375 1.    1.    1.   ]
 [0.375 0.375 1.    0.375 1.    1.    1.   ]
 [1.    1.    1.    1.    0.5   1.    1.   ]
 [0.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 3 4 2 5 6]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.6607142857142857
Distance between rules: 
0.5859375

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[0.375   0.28125 0.28125 1.     ]
 [0.375   0.34375 0.34375 1.     ]
 [0.375   0.34375 0.34375 1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[1 2 0 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.41250000000000003

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[0.375 0.375 0.375 0.375 1.   ]
 [0.375 0.375 0.375 0.375 1.   ]
 [0.375 0.375 0.375 0.375 1.   ]
 [1.    1.    1.    1.    1.   ]
 [0.    0.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.125
Distance between rule bodies: 
0.625
Distance between rules: 
0.53125

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0.0625
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[0.375 0.375 0.375 0.375 0.375 1.    1.    1.    1.   ]
 [0.375 0.375 0.375 0.375 0.375 1.    1.    1.    1.   ]
 [0.375 0.375 0.375 0.375 0.375 1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    0.5   0.5   1.    1.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 2 5 3 4 6 7 8]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.736111111111111
Distance between rules: 
0.66875

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0.0625
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[0.375 1.    1.    0.   ]
 [0.375 1.    1.    0.   ]
 [0.375 1.    1.    0.   ]
 [1.    1.    1.    0.   ]]
Optimal Body Condition Assignment: 
[3 0 2 1]
Sum of distances for optimal body condition assignment: 
2.375
Distance between rule bodies: 
0.84375
Distance between rules: 
0.6875

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _]
6
2
Body atom distances: 
[[0.25 1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 5 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _]
6
2
Body atom distances: 
[[0.25 1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 5 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[happensAt(gap_start(Vessel),T), _, _, _, _, _]
6
1
Body atom distances: 
[[0.25 0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 5 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _]
6
2
Body atom distances: 
[[0.25   1.     0.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.     0.    ]
 [1.     0.0625 0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 3 4 5 2 1]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.71875
Distance between rules: 
0.6339285714285714

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _]
6
2
Body atom distances: 
[[0.25 1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 5 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[happensAt(gap_end(Vessel),T), _, _, _, _, _]
6
1
Body atom distances: 
[[0.25 0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 5 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _, _, _]
6
3
Body atom distances: 
[[1.     1.     1.     0.     0.     0.    ]
 [1.     1.     1.     0.     0.     0.    ]
 [1.     1.     1.     0.     0.     0.    ]
 [1.     1.     1.     0.     0.     0.    ]
 [1.     1.     0.5    0.     0.     0.    ]
 [0.125  0.0625 1.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[3 4 5 0 2 1]
Sum of distances for optimal body condition assignment: 
1.5625
Distance between rule bodies: 
0.7604166666666666
Distance between rules: 
0.6607142857142857

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _, _]
6
2
Body atom distances: 
[[1.    1.    0.    0.    0.    0.   ]
 [1.    1.    0.    0.    0.    0.   ]
 [1.    1.    0.    0.    0.    0.   ]
 [1.    1.    0.    0.    0.    0.   ]
 [1.    1.    0.    0.    0.    0.   ]
 [0.125 1.    0.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[2 3 4 5 1 0]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.8541666666666666
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _]
6
2
Body atom distances: 
[[1.     1.     0.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.     0.    ]
 [0.125  0.0625 0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[2 3 4 5 0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.84375
Distance between rules: 
0.8660714285714285

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation), _, _]
6
4
Body atom distances: 
[[0.25 1.   1.   1.   0.   0.  ]
 [1.   1.   1.   1.   0.   0.  ]
 [1.   1.   1.   1.   0.   0.  ]
 [1.   1.   1.   1.   0.   0.  ]
 [1.   1.   1.   0.5  0.   0.  ]
 [1.   1.   1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 5 4 2 3 1]
Sum of distances for optimal body condition assignment: 
2.75
Distance between rule bodies: 
0.7916666666666666
Distance between rules: 
0.6785714285714285

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation), _, _]
6
4
Body atom distances: 
[[0.25 1.   1.   1.   0.   0.  ]
 [1.   1.   1.   1.   0.   0.  ]
 [1.   1.   1.   1.   0.   0.  ]
 [1.   1.   1.   1.   0.   0.  ]
 [1.   1.   1.   1.   0.   0.  ]
 [1.   1.   1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 5 4 2 1 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
6
Body atom distances: 
[[0.0625 1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.0625
Distance between rule bodies: 
0.84375
Distance between rules: 
0.7321428571428571

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel)), _]
6
5
Body atom distances: 
[[0.0625 1.     1.     1.     1.     0.    ]
 [1.     1.     1.     1.     1.     0.    ]
 [1.     1.     1.     1.     1.     0.    ]
 [1.     1.     1.     1.     1.     0.    ]
 [1.     1.     1.     1.     1.     0.    ]
 [1.     1.     1.     1.     1.     0.    ]]
Optimal Body Condition Assignment: 
[0 5 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0625
Distance between rule bodies: 
0.84375
Distance between rules: 
0.8660714285714285

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel)), _]
6
5
Body atom distances: 
[[0.0625 1.     1.     1.     1.     0.    ]
 [1.     1.     1.     1.     1.     0.    ]
 [1.     1.     1.     1.     1.     0.    ]
 [1.     1.     1.     1.     1.     0.    ]
 [1.     1.     0.5    1.     1.     0.    ]
 [1.     1.     1.     1.     1.     0.    ]]
Optimal Body Condition Assignment: 
[0 5 1 3 2 4]
Sum of distances for optimal body condition assignment: 
3.5625
Distance between rule bodies: 
0.7604166666666666
Distance between rules: 
0.7946428571428571

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _, _]
6
3
Body atom distances: 
[[1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 5 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T), _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
6
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _, _]
6
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 2 0 1 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I), _]
6
5
Body atom distances: 
[[1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[5 1 0 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
6
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _, _]
6
3
Body atom distances: 
[[1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 5 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
[_, _, _, _, _, _]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   0.5 ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.55

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0.0625 1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     0.5    1.     1.    ]
 [0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
2.5625
Distance between rule bodies: 
0.7604166666666666
Distance between rules: 
0.7946428571428571

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0.0625 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0625
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0.0625 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0625
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.65

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.09375 1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.09375
Distance between rule bodies: 
0.8489583333333333
Distance between rules: 
0.8705357142857142

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.09375 1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.09375
Distance between rule bodies: 
0.8187500000000001
Distance between rules: 
0.6927083333333333

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.09375 1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.09375
Distance between rule bodies: 
0.8187500000000001
Distance between rules: 
0.6927083333333333

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(end(=(underWay(Vessel),true)),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(end(=(underWay(Vessel),true)),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(end(=(underWay(Vessel),true)),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(end(=(underWay(Vessel),true)),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(end(=(underWay(Vessel),true)),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.65

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(underWay(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _, _, _, _]
7
3
Body atom distances: 
[[1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 5 6 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation), _, _, _]
7
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 6 3 0 1 2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation), _, _, _]
7
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 6 3 0 1 2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel)), _]
7
6
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[6 1 0 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel)), _, _]
7
5
Body atom distances: 
[[1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[5 6 2 0 1 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel)), _, _]
7
5
Body atom distances: 
[[1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[5 6 2 0 1 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _, _, _]
7
3
Body atom distances: 
[[0.375    0.375    1.       0.       0.       0.       0.      ]
 [0.3125   0.265625 1.       0.       0.       0.       0.      ]
 [1.       1.       0.375    0.       0.       0.       0.      ]
 [0.375    0.375    1.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.      ]]
Optimal Body Condition Assignment: 
[3 1 2 0 4 5 6]
Sum of distances for optimal body condition assignment: 
1.015625
Distance between rule bodies: 
0.7165178571428571
Distance between rules: 
0.634765625

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
7
Body atom distances: 
[[0.25       0.375      1.         0.3125     1.         1.
  1.        ]
 [0.375      0.25       1.         0.375      1.         1.
  1.        ]
 [1.         1.         0.375      1.         1.         1.
  1.        ]
 [0.3125     0.375      1.         0.25       1.         1.
  1.        ]
 [1.         1.         1.         1.         0.125      1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.4166666666666665
Distance between rule bodies: 
0.3452380952380952
Distance between rules: 
0.30208333333333326

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _, _, _]
7
4
Body atom distances: 
[[0.375  0.375  0.375  1.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.    ]
 [1.     1.     1.     0.5    0.     0.     0.    ]
 [0.375  0.375  0.375  1.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[1 0 3 2 5 4 6]
Sum of distances for optimal body condition assignment: 
1.5625
Distance between rule bodies: 
0.6517857142857143
Distance between rules: 
0.578125

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I), _, _]
7
5
Body atom distances: 
[[0.375  0.375  0.375  0.375  1.     0.     0.    ]
 [0.3125 0.0625 0.3125 0.3125 1.     0.     0.    ]
 [1.     1.     1.     1.     0.5    0.     0.    ]
 [0.375  0.375  0.375  0.375  1.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.    ]]
Optimal Body Condition Assignment: 
[3 1 4 2 5 6 0]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.6160714285714285
Distance between rules: 
0.5468749999999999

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
7
Body atom distances: 
[[0.375   0.34375 0.375   0.34375 0.375   1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      0.375   0.375  ]
 [0.375   0.34375 0.375   0.34375 0.375   1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      0.375   0.375   1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[1 0 7 3 5 2 4 6 8]
Sum of distances for optimal body condition assignment: 
3.75
Distance between rule bodies: 
0.6388888888888888
Distance between rules: 
0.58125

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _, _, _]
7
3
Body atom distances: 
[[0.375      1.         1.         0.         0.         0.
  0.        ]
 [0.265625   1.         1.         0.         0.         0.
  0.        ]
 [1.         1.         1.         0.         0.         0.
  0.        ]
 [0.375      1.         1.         0.         0.         0.
  0.        ]
 [1.         1.         1.         0.         0.         0.
  0.        ]
 [1.         1.         1.         0.         0.         0.
  0.        ]
 [1.         1.         0.33333333 0.         0.         0.
  0.        ]]
Optimal Body Condition Assignment: 
[3 0 5 6 4 1 2]
Sum of distances for optimal body condition assignment: 
1.5989583333333333
Distance between rule bodies: 
0.7998511904761904
Distance between rules: 
0.7076822916666665

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.7232142857142857

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   0.5  0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
0.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1.  1.  0.  0. ]
 [1.  1.  0.  0. ]
 [1.  1.  0.  0. ]
 [1.  0.5 0.  0. ]]
Optimal Body Condition Assignment: 
[2 3 0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.7125

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax)), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.8571428571428571

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax)), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.6770833333333333

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax)), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.6770833333333333

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax)), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax)), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax)), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_Status)),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _]
9
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 8 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _]
9
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 8 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _, _]
9
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 7 8 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _, _]
9
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 8 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _, _]
9
2
Body atom distances: 
[[1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  0.5 0.  0.  0.  0.  0.  0.  0. ]
 [1.  0.5 0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[2 3 1 5 6 7 8 4 0]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _, _]
9
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 7 8 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _, _, _, _, _, _]
9
3
Body atom distances: 
[[1. 1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 5 6 7 8 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _, _, _, _, _]
9
2
Body atom distances: 
[[1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  0.5 0.  0.  0.  0.  0.  0.  0. ]
 [1.  0.5 0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[2 3 1 5 6 7 8 4 0]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _, _, _, _]
9
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 8 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation), _, _, _, _, _]
9
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 6 7 8 3 0 1 2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation), _, _, _, _, _]
9
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 6 7 8 3 0 1 2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel)), _, _, _]
9
6
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[6 7 8 3 0 1 2 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel)), _, _, _, _]
9
5
Body atom distances: 
[[1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[5 6 7 8 4 0 1 2 3]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel)), _, _, _, _]
9
5
Body atom distances: 
[[1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[5 6 7 8 4 0 1 2 3]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _]
9
3
Body atom distances: 
[[0.3125 0.3125 1.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.3125 1.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.3125 1.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     0.5    0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[3 4 5 6 0 1 2 7 8]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.7916666666666666
Distance between rules: 
0.71875

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I), _, _]
9
7
Body atom distances: 
[[0.375      0.3125     1.         0.375      1.         1.
  1.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.         0.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         0.         0.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         0.         0.        ]
 [1.         1.         0.5        1.         1.         1.
  1.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667 0.         0.        ]]
Optimal Body Condition Assignment: 
[1 8 7 4 0 3 2 5 6]
Sum of distances for optimal body condition assignment: 
3.7291666666666665
Distance between rule bodies: 
0.636574074074074
Distance between rules: 
0.5791666666666666

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _, _, _, _, _]
9
4
Body atom distances: 
[[0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     0.375  0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[2 5 6 7 1 0 3 8 4]
Sum of distances for optimal body condition assignment: 
1.4375
Distance between rule bodies: 
0.7152777777777778
Distance between rules: 
0.64375

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I), _, _, _, _]
9
5
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.5    0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[2 6 7 8 3 0 4 5 1]
Sum of distances for optimal body condition assignment: 
2.4375
Distance between rule bodies: 
0.7152777777777778
Distance between rules: 
0.65

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
9
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.25   0.5   ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 5 2 3 4 1 7 6 8]
Sum of distances for optimal body condition assignment: 
6.1875
Distance between rule bodies: 
0.6875
Distance between rules: 
0.625

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _, _, _, _, _]
9
3
Body atom distances: 
[[0.3125     1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [0.3125     1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [0.3125     1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [1.         1.         0.33333333 0.         0.         0.
  0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[3 4 5 6 7 0 8 1 2]
Sum of distances for optimal body condition assignment: 
1.6458333333333333
Distance between rule bodies: 
0.849537037037037
Distance between rules: 
0.7708333333333334

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17  1  0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17  1  0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17  0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17  1  0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
2
Body atom distances: 
[[1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  0.5 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  0.5 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[ 2  1  4  5  6  7  8  9 10 11 12 13 14 15 16 17  3  0]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17  0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
3
Body atom distances: 
[[1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17  2  0  1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
2
Body atom distances: 
[[1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  0.5 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  0.5 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[ 2  1  4  5  6  7  8  9 10 11 12 13 14 15 16 17  3  0]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17  1  0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation), _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 4  5  6  7  8  9 10 11 12 13 14 15 16 17  3  0  1  2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation), _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 4  5  6  7  8  9 10 11 12 13 14 15 16 17  3  0  1  2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel)), _, _, _, _, _, _, _, _, _, _, _, _]
18
6
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 6  7  8  9 10 11 12 13 14 15 16 17  5  0  1  2  3  4]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel)), _, _, _, _, _, _, _, _, _, _, _, _, _]
18
5
Body atom distances: 
[[1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 5  6  7  8  9 10 11 12 13 14 15 16 17  4  0  1  2  3]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel)), _, _, _, _, _, _, _, _, _, _, _, _, _]
18
5
Body atom distances: 
[[1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 5  6  7  8  9 10 11 12 13 14 15 16 17  4  0  1  2  3]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
3
Body atom distances: 
[[0.3125  0.3125  1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.3125  0.3125  1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.3125  0.3125  1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.375   0.375   1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.375   0.375   1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      0.5     0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.3125  0.28125 1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.3125  0.28125 1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.3125  0.28125 1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.3125  0.28125 1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[ 3  4  5  6  7  8  9 10 11  2 13 14 15  0  1 17 16 12]
Sum of distances for optimal body condition assignment: 
1.09375
Distance between rule bodies: 
0.8940972222222222
Distance between rules: 
0.850328947368421

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I), _, _, _, _, _, _, _, _, _, _, _]
18
7
Body atom distances: 
[[0.375      0.3125     1.         0.375      1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.28125    0.375      1.         0.34375    1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.28125    0.375      1.         0.34375    1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         1.         0.375      1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         1.         0.375      1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         0.5        1.         1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667 0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[ 7  8  9 10 11  3  0 14  4  2  5  1 13 12 15 16 17  6]
Sum of distances for optimal body condition assignment: 
2.9479166666666665
Distance between rule bodies: 
0.7748842592592592
Distance between rules: 
0.737390350877193

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
4
Body atom distances: 
[[0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.375  0.125  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.375  0.375  0.125  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     0.375  0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 4  5  6  7  8  1  2 11 12  3 14 15 16  0 10  9 17 13]
Sum of distances for optimal body condition assignment: 
0.9375
Distance between rule bodies: 
0.829861111111111
Distance between rules: 
0.7894736842105262

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I), _, _, _, _, _, _, _, _, _, _, _, _, _]
18
5
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.375  0.375  0.375  0.375  1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.375  0.375  0.375  0.375  1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.5    0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.     0.
  0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 5  6  7  8  9 10 11 12 13  4 15  2  1  3  0 17 16 14]
Sum of distances for optimal body condition assignment: 
1.75
Distance between rule bodies: 
0.8194444444444444
Distance between rules: 
0.7796052631578947

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I), _, _, _, _, _, _, _, _, _]
18
9
Body atom distances: 
[[0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.3125  0.3125  0.25    0.3125  0.28125 1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.3125  0.3125  0.28125 0.3125  0.25    1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.375   0.0625  0.375   0.34375 0.375   1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.375   0.34375 0.375   0.0625  0.375   1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      0.375   0.375   1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      0.375   0.375   1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      0.5     0.5
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  0.      0.      0.      0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[ 9 10 11  2  4  1  3  5  6  8 14 13 12  0 17 16 15  7]
Sum of distances for optimal body condition assignment: 
3.1875
Distance between rule bodies: 
0.6770833333333333
Distance between rules: 
0.6414473684210525

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
3
Body atom distances: 
[[0.3125     1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.3125     1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.3125     1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.375      1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.375      1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.28125    1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.28125    1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.28125    1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.28125    1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [1.         1.         0.33333333 0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[ 3  4  5  6  7  8  9 10 11 12 13 14 15 16  0 17  1  2]
Sum of distances for optimal body condition assignment: 
1.6145833333333333
Distance between rule bodies: 
0.9230324074074073
Distance between rules: 
0.8777412280701753

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list(])),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list(])), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_start(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
5
2
Body atom distances: 
[[0.25     1.       0.       0.       0.      ]
 [1.       1.       0.       0.       0.      ]
 [1.       1.       0.       0.       0.      ]
 [1.       1.       0.       0.       0.      ]
 [1.       0.015625 0.       0.       0.      ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
0.265625
Distance between rule bodies: 
0.6531250000000001
Distance between rules: 
0.5651041666666667

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_end(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _, _]
5
3
Body atom distances: 
[[1.     1.     1.     0.     0.    ]
 [1.     1.     1.     0.     0.    ]
 [1.     1.     1.     0.     0.    ]
 [1.     1.     1.     0.     0.    ]
 [0.125  0.0625 1.     0.     0.    ]]
Optimal Body Condition Assignment: 
[3 4 2 0 1]
Sum of distances for optimal body condition assignment: 
2.0625
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6875

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _]
5
2
Body atom distances: 
[[1.    1.    0.    0.    0.   ]
 [1.    1.    0.    0.    0.   ]
 [1.    1.    0.    0.    0.   ]
 [1.    1.    0.    0.    0.   ]
 [0.125 1.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.8250000000000001
Distance between rules: 
0.8541666666666666

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _]
5
2
Body atom distances: 
[[1.     1.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.    ]
 [0.125  0.0625 0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[2 3 4 0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.8125
Distance between rules: 
0.84375

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation), _]
5
4
Body atom distances: 
[[0.25 1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 4 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation), _]
5
4
Body atom distances: 
[[0.25 1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]
 [1.   1.   1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 4 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
5
Body atom distances: 
[[0.03125 1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
4.03125
Distance between rule bodies: 
0.8385416666666666
Distance between rules: 
0.7276785714285714

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
5
Body atom distances: 
[[0.03125 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.03125
Distance between rule bodies: 
0.80625
Distance between rules: 
0.8385416666666666

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
5
Body atom distances: 
[[0.03125 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.03125
Distance between rule bodies: 
0.80625
Distance between rules: 
0.8385416666666666

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _]
5
3
Body atom distances: 
[[1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _]
5
4
Body atom distances: 
[[1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[4 1 0 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
5
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _]
5
3
Body atom distances: 
[[1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   0.5  0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
0.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1.  1.  0.  0. ]
 [1.  1.  0.  0. ]
 [1.  1.  0.  0. ]
 [1.  0.5 0.  0. ]]
Optimal Body Condition Assignment: 
[2 3 0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.7125

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax)), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0.03125 1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.03125
Distance between rule bodies: 
0.8385416666666666
Distance between rules: 
0.8616071428571428

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax)), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0.03125 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.03125
Distance between rule bodies: 
0.80625
Distance between rules: 
0.6822916666666666

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax)), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[0.03125 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.03125
Distance between rule bodies: 
0.80625
Distance between rules: 
0.6822916666666666

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax)), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax)), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax)), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_Status)),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25     1.      ]
 [1.       0.015625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.265625
Distance between rule bodies: 
0.1328125
Distance between rules: 
0.13020833333333331

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.0625
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
2
Body atom distances: 
[[1.     1.     1.    ]
 [0.125  0.0625 1.    ]
 [0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.53125

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1.    1.   ]
 [0.125 1.   ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.5625
Distance between rules: 
0.7083333333333333

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1.     1.    ]
 [0.125  0.0625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.53125
Distance between rules: 
0.6875

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(gap_start(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(gap_end(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _, _]
5
3
Body atom distances: 
[[1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation), _]
5
4
Body atom distances: 
[[1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[4 1 0 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation), _]
5
4
Body atom distances: 
[[1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[4 1 0 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
5
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
5
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _]
5
3
Body atom distances: 
[[0.3125 0.3125 1.     0.     0.    ]
 [0.3125 0.3125 1.     0.     0.    ]
 [1.     1.     0.375  0.     0.    ]
 [1.     1.     1.     0.     0.    ]
 [1.     1.     1.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.6000000000000001
Distance between rules: 
0.5104166666666667

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I), _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
5
Body atom distances: 
[[0.375      0.3125     1.         0.375      1.         1.
  1.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.        ]
 [1.         1.         0.375      1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]]
Optimal Body Condition Assignment: 
[1 0 2 3 6 4 5]
Sum of distances for optimal body condition assignment: 
2.2291666666666665
Distance between rule bodies: 
0.6041666666666665
Distance between rules: 
0.5364583333333333

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _]
5
4
Body atom distances: 
[[0.3125 0.375  0.375  1.     0.    ]
 [0.3125 0.375  0.375  1.     0.    ]
 [1.     1.     1.     0.5    0.    ]
 [1.     1.     1.     1.     0.    ]
 [1.     1.     1.     1.     0.    ]]
Optimal Body Condition Assignment: 
[2 0 3 4 1]
Sum of distances for optimal body condition assignment: 
2.1875
Distance between rule bodies: 
0.6375000000000001
Distance between rules: 
0.5416666666666667

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
5
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 1.    ]
 [0.3125 0.3125 0.3125 0.3125 1.    ]
 [1.     1.     1.     1.     0.5   ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 4 2 3]
Sum of distances for optimal body condition assignment: 
3.125
Distance between rule bodies: 
0.625
Distance between rules: 
0.53125

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I), _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
5
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.125  0.375 ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 7 2 3 4 5 6 8]
Sum of distances for optimal body condition assignment: 
2.75
Distance between rule bodies: 
0.75
Distance between rules: 
0.68125

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _]
5
3
Body atom distances: 
[[0.3125     1.         1.         0.         0.        ]
 [0.3125     1.         1.         0.         0.        ]
 [1.         1.         1.         0.         0.        ]
 [1.         1.         1.         0.         0.        ]
 [1.         1.         0.33333333 0.         0.        ]]
Optimal Body Condition Assignment: 
[3 0 4 1 2]
Sum of distances for optimal body condition assignment: 
1.6458333333333333
Distance between rule bodies: 
0.7291666666666666
Distance between rules: 
0.6180555555555555

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.765625

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
3
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.7232142857142857

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
3
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
3
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.8333333333333333

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.765625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.765625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
3
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.8571428571428571

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
3
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.6770833333333333

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
3
Body atom distances: 
[[0. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.6770833333333333

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_Status)),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(change_in_heading(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(change_in_heading(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(change_in_heading(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.0625
[happensAt(change_in_heading(Vessel),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.765625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(change_in_heading(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(change_in_heading(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
0.0625
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.765625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(start(=(gap(Vessel),_Status)),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(start(=(gap(Vessel),_Status)),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel))]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[0.3125 0.3125 1.     0.    ]
 [0.3125 0.3125 1.     0.    ]
 [1.     1.     0.375  0.    ]
 [1.     1.     1.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.41250000000000003

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0.0625
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[0.375      0.3125     1.         0.375      1.         1.
  1.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.        ]
 [1.         1.         0.375      1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]]
Optimal Body Condition Assignment: 
[1 0 2 6 3 4 5]
Sum of distances for optimal body condition assignment: 
1.2291666666666667
Distance between rule bodies: 
0.6041666666666666
Distance between rules: 
0.5364583333333333

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[0.3125 0.375  0.375  1.    ]
 [0.3125 0.375  0.375  1.    ]
 [1.     1.     1.     0.5   ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 3 2]
Sum of distances for optimal body condition assignment: 
2.1875
Distance between rule bodies: 
0.546875
Distance between rules: 
0.45

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 1.    ]
 [0.3125 0.3125 0.3125 0.3125 1.    ]
 [1.     1.     1.     1.     0.5   ]
 [1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 4 2 3]
Sum of distances for optimal body condition assignment: 
2.125
Distance between rule bodies: 
0.625
Distance between rules: 
0.53125

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0.0625
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.125  0.375 ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 7 2 3 4 5 6 8]
Sum of distances for optimal body condition assignment: 
1.75
Distance between rule bodies: 
0.75
Distance between rules: 
0.68125

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0.0625
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[0.3125     1.         1.         0.        ]
 [0.3125     1.         1.         0.        ]
 [1.         1.         1.         0.        ]
 [1.         1.         0.33333333 0.        ]]
Optimal Body Condition Assignment: 
[3 0 1 2]
Sum of distances for optimal body condition assignment: 
1.6458333333333333
Distance between rule bodies: 
0.6614583333333333
Distance between rules: 
0.5416666666666666

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _]
8
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _]
8
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _]
8
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 7 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _]
8
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _]
8
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _]
8
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 7 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _, _, _, _, _]
8
3
Body atom distances: 
[[1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 5 6 7 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _, _, _, _]
8
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _, _, _]
8
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation), _, _, _, _]
8
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 6 7 3 0 1 2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation), _, _, _, _]
8
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 6 7 3 0 1 2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel)), _, _]
8
6
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[6 7 2 0 1 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel)), _, _, _]
8
5
Body atom distances: 
[[1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[5 6 7 3 0 1 2 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel)), _, _, _]
8
5
Body atom distances: 
[[1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[5 6 7 3 0 1 2 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _]
8
3
Body atom distances: 
[[0.3125   0.3125   1.       0.       0.       0.       0.       0.      ]
 [0.375    0.375    1.       0.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.       0.      ]
 [0.3125   0.265625 1.       0.       0.       0.       0.       0.      ]
 [0.3125   0.3125   1.       0.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.       0.      ]]
Optimal Body Condition Assignment: 
[3 4 5 1 0 6 7 2]
Sum of distances for optimal body condition assignment: 
1.578125
Distance between rule bodies: 
0.822265625
Distance between rules: 
0.7378472222222222

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0.0625
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I), _]
8
7
Body atom distances: 
[[0.375      0.3125     1.         0.375      1.         1.
  1.         0.        ]
 [0.25       0.375      1.         0.3125     1.         1.
  1.         0.        ]
 [1.         1.         1.         1.         0.375      1.
  1.         0.        ]
 [0.375      0.265625   1.         0.375      1.         1.
  1.         0.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667 0.        ]]
Optimal Body Condition Assignment: 
[3 0 4 1 7 5 2 6]
Sum of distances for optimal body condition assignment: 
3.432291666666667
Distance between rule bodies: 
0.5540364583333334
Distance between rules: 
0.4994212962962963

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _, _, _, _]
8
4
Body atom distances: 
[[0.3125 0.375  0.375  1.     0.     0.     0.     0.    ]
 [0.375  0.375  0.375  1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[4 1 6 2 0 7 5 3]
Sum of distances for optimal body condition assignment: 
2.0625
Distance between rule bodies: 
0.7578125
Distance between rules: 
0.6805555555555555

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I), _, _, _]
8
5
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.    ]
 [0.375  0.375  0.375  0.375  1.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[2 1 7 3 0 5 6 4]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.6640625
Distance between rules: 
0.5972222222222222

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0.0625
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I), _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
8
Body atom distances: 
[[0.3125  0.3125  0.28125 0.3125  0.28125 1.      1.      1.      1.     ]
 [0.375   0.34375 0.375   0.34375 0.375   1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      0.375   0.375   1.      1.     ]
 [0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[2 1 5 0 3 4 6 7 8]
Sum of distances for optimal body condition assignment: 
4.625
Distance between rule bodies: 
0.625
Distance between rules: 
0.56875

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _, _, _, _]
8
3
Body atom distances: 
[[0.3125     1.         1.         0.         0.         0.
  0.         0.        ]
 [0.375      1.         1.         0.         0.         0.
  0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.        ]
 [0.265625   1.         1.         0.         0.         0.
  0.         0.        ]
 [0.3125     1.         1.         0.         0.         0.
  0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.        ]
 [1.         1.         0.33333333 0.         0.         0.
  0.         0.        ]]
Optimal Body Condition Assignment: 
[3 4 5 0 7 6 1 2]
Sum of distances for optimal body condition assignment: 
1.5989583333333333
Distance between rule bodies: 
0.8248697916666666
Distance between rules: 
0.7332175925925926

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _, _, _, _, _]
13
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 2  3  4  5  6  7  8  9 10 11 12  1  0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _, _, _, _, _]
13
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 2  3  4  5  6  7  8  9 10 11 12  1  0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _]
13
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 1  2  3  4  5  6  7  8  9 10 11 12  0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _, _, _, _, _, _]
13
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 2  3  4  5  6  7  8  9 10 11 12  1  0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _, _, _, _, _, _]
13
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 2  3  4  5  6  7  8  9 10 11 12  1  0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _]
13
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 1  2  3  4  5  6  7  8  9 10 11 12  0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),above),T),
	holdsAt(=(nearCoast(Vessel),true),T),
	>(movingSpeed(Vessel),5).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[holdsAt(=(movingSpeed(Vessel),above),T), holdsAt(=(nearCoast(Vessel),true),T), >(movingSpeed(Vessel),5), _, _, _, _, _, _, _, _, _, _]
13
3
Body atom distances: 
[[1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 3  4  5  6  7  8  9 10 11 12  2  0  1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _, _, _, _, _, _, _, _, _]
13
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 2  3  4  5  6  7  8  9 10 11 12  1  0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _, _, _, _, _, _, _, _]
13
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 2  3  4  5  6  7  8  9 10 11 12  1  0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	>(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), >(Deviation,MaxDeviation), _, _, _, _, _, _, _, _, _]
13
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 4  5  6  7  8  9 10 11 12  3  0  1  2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(courseOverGround(Vessel,CoG),T),
	threshold(deviation,MaxDeviation),
	deviation(CoG,_TrueHeading,Deviation),
	=<(Deviation,MaxDeviation).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[happensAt(courseOverGround(Vessel,CoG),T), threshold(deviation,MaxDeviation), deviation(CoG,_TrueHeading,Deviation), =<(Deviation,MaxDeviation), _, _, _, _, _, _, _, _, _]
13
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 4  5  6  7  8  9 10 11 12  3  0  1  2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>=(Speed,MinSpeed),
	=<(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	>=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >=(Speed,MinSpeed), =<(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), >=(HeadingDist,trawlingAngle(Vessel)), _, _, _, _, _, _, _]
13
6
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 6  7  8  9 10 11 12  5  0  1  2  3  4]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	<(Speed,MinSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), <(Speed,MinSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel)), _, _, _, _, _, _, _, _]
13
5
Body atom distances: 
[[1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 5  6  7  8  9 10 11 12  4  0  1  2  3]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	>(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	<(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), >(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), <(HeadingDist,trawlingAngle(Vessel)), _, _, _, _, _, _, _, _]
13
5
Body atom distances: 
[[1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 5  6  7  8  9 10 11 12  4  0  1  2  3]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _, _, _, _, _]
13
3
Body atom distances: 
[[0.3125  0.3125  1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.3125  0.3125  1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.3125  0.3125  1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.375   0.375   1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.375   0.375   1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      0.5     0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.3125  0.28125 1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.3125  0.28125 1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[ 3  4  5  6  7  8  9 10  2 12  1  0 11]
Sum of distances for optimal body condition assignment: 
1.09375
Distance between rule bodies: 
0.8533653846153847
Distance between rules: 
0.7968750000000001

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I), _, _, _, _, _, _]
13
7
Body atom distances: 
[[0.375   0.3125  1.      0.375   1.      1.      1.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      0.      0.
  0.      0.      0.      0.     ]
 [0.375   0.3125  1.      0.375   1.      1.      1.      0.      0.
  0.      0.      0.      0.     ]
 [0.375   0.3125  1.      0.375   1.      1.      1.      0.      0.
  0.      0.      0.      0.     ]
 [0.28125 0.375   1.      0.34375 1.      1.      1.      0.      0.
  0.      0.      0.      0.     ]
 [0.28125 0.375   1.      0.34375 1.      1.      1.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      1.      0.375   1.      1.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      1.      0.375   1.      1.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      0.5     1.      1.      1.      1.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      0.      0.
  0.      0.      0.      0.     ]
 [0.375   0.28125 1.      0.375   1.      1.      1.      0.      0.
  0.      0.      0.      0.     ]
 [0.375   0.28125 1.      0.375   1.      1.      1.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      0.      0.
  0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[ 7  8  9 11  3  0  4 10  2 12  1  6  5]
Sum of distances for optimal body condition assignment: 
3.78125
Distance between rule bodies: 
0.7524038461538461
Distance between rules: 
0.703125

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _, _, _, _, _, _, _, _, _]
13
4
Body atom distances: 
[[0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.375  0.125  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.375  0.375  0.125  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [1.     1.     1.     0.375  0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.     0.
  0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 4  5  6  7  1  2 10 11  3  9  8  0 12]
Sum of distances for optimal body condition assignment: 
0.9375
Distance between rule bodies: 
0.764423076923077
Distance between rules: 
0.7142857142857142

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I), _, _, _, _, _, _, _, _]
13
5
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.375  0.375  0.375  0.375  1.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.375  0.375  0.375  0.375  1.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [1.     1.     1.     1.     0.5    0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.     0.
  0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.     0.
  0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[ 5  6  2  3  9 10 11 12  4  7  0  1  8]
Sum of distances for optimal body condition assignment: 
1.75
Distance between rule bodies: 
0.75
Distance between rules: 
0.7008928571428571

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I), _, _, _, _]
13
9
Body atom distances: 
[[0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.
  0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  0.      0.      0.      0.     ]
 [0.3125  0.3125  0.25    0.3125  0.28125 1.      1.      1.      1.
  0.      0.      0.      0.     ]
 [0.3125  0.3125  0.28125 0.3125  0.25    1.      1.      1.      1.
  0.      0.      0.      0.     ]
 [0.375   0.0625  0.375   0.34375 0.375   1.      1.      1.      1.
  0.      0.      0.      0.     ]
 [0.375   0.34375 0.375   0.0625  0.375   1.      1.      1.      1.
  0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      0.375   0.375   1.      1.
  0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      0.375   0.375   1.      1.
  0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      0.25    0.5
  0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  0.      0.      0.      0.     ]
 [0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.
  0.      0.      0.      0.     ]
 [0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.
  0.      0.      0.      0.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[ 0 10  2  4  1  3  6  5  7  9 12 11  8]
Sum of distances for optimal body condition assignment: 
2.9375
Distance between rule bodies: 
0.5336538461538461
Distance between rules: 
0.5

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _, _, _, _, _, _, _, _, _]
13
3
Body atom distances: 
[[0.3125  1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.3125  1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.3125  1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.375   1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.375   1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.28125 1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.28125 1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [1.      1.      1.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[ 3  4  5  6  7  8  9 10 11 12  0  2  1]
Sum of distances for optimal body condition assignment: 
2.28125
Distance between rule bodies: 
0.9447115384615385
Distance between rules: 
0.8816964285714286

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list(])),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list(])), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
[_, _, _, _, _, _, _, _, _, _, _, _, _]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Rule distances: 
[[0.10416667 0.5        0.75       ... 1.         1.         1.        ]
 [0.5        0.10416667 0.41666667 ... 1.         1.         1.        ]
 [0.75       0.421875   0.0078125  ... 1.         1.         1.        ]
 ...
 [1.         1.         1.         ... 1.         1.         1.        ]
 [1.         1.         1.         ... 1.         1.         1.        ]
 [1.         1.         1.         ... 1.         1.         1.        ]]
Optimal Rule Assignment: 
[ 0  1  2  3  4  5 39 27 41 29  9 33 26 24 34 22 11 43  8 48 20 21  7 23
 16 25 10 31 28 15 30 12 32 50 49 35 36 37 38  6 40 19 42 13 44 45 46 47
 14 17 18]
Sum of distances for optimal rule assignment: 
39.23380456349206
Distance between event descriptions: 
0.7692902855586677
Event Description Similarity: 
0.23070971444133226
