Event Description 1: 
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).

terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).

terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).

initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).

initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).

terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).

terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).

=(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).

holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).

holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).

holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).

holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.


Event Description 2: 
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).


Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.0625 1.    ]
 [1.     0.25  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.15625
Distance between rules: 
0.10416666666666666

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.25]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.25
Distance between rules: 
0.5

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(stop_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(slow_motion_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(slow_motion_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(change_in_speed_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(change_in_speed_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
0.125
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
0.125
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
0.125
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(end(=(underWay(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(change_in_heading(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.25]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.25
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.0625 1.    ]
 [1.     0.25  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.15625
Distance between rules: 
0.10416666666666666

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.015625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.421875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(stop_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.125
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(slow_motion_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(slow_motion_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(change_in_speed_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(change_in_speed_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
0.125
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.125
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(end(=(underWay(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(change_in_heading(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0
[happensAt(gap_start(Vessel),T), _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.41666666666666663

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.015625
[happensAt(gap_start(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0078125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T)]
[happensAt(stop_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(slow_motion_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T)]
[happensAt(slow_motion_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(change_in_speed_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T)]
[happensAt(change_in_speed_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T)]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(change_in_heading(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0. 0.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.35416666666666663

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.125
Distance between rules: 
0.10416666666666666

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(stop_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(slow_motion_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(slow_motion_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(change_in_speed_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(change_in_speed_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
2
Body atom distances: 
[[0.25     1.       1.       1.      ]
 [1.       1.       1.       0.015625]
 [0.       0.       0.       0.      ]
 [0.       0.       0.       0.      ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
0.265625
Distance between rule bodies: 
0.56640625
Distance between rules: 
0.478125

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
2
Body atom distances: 
[[0.25   1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     0.0625]
 [0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 5 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.71875
Distance between rules: 
0.6339285714285714

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(end(=(underWay(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
2
Body atom distances: 
[[0.25     1.       1.       1.       1.      ]
 [1.       1.       1.       1.       0.015625]
 [0.       0.       0.       0.       0.      ]
 [0.       0.       0.       0.       0.      ]
 [0.       0.       0.       0.       0.      ]]
Optimal Body Condition Assignment: 
[0 4 1 2 3]
Sum of distances for optimal body condition assignment: 
0.265625
Distance between rule bodies: 
0.6531250000000001
Distance between rules: 
0.5651041666666667

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
2
Body atom distances: 
[[0.25     1.      ]
 [1.       0.015625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.265625
Distance between rule bodies: 
0.1328125
Distance between rules: 
0.13020833333333331

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(change_in_heading(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0. 0.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.35416666666666663

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.125
Distance between rules: 
0.10416666666666666

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(stop_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(slow_motion_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(slow_motion_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(change_in_speed_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(change_in_speed_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   0.5  1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1 3]
Sum of distances for optimal body condition assignment: 
0.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.5750000000000001

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   0.5 ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.75
Distance between rule bodies: 
0.5833333333333333
Distance between rules: 
0.6875

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(end(=(underWay(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   0.5 ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
0.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
2
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  0.5 0.5 1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[0 2 1 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
2
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   0.5 ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
0.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(change_in_heading(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(gap_end(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.03125

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(stop_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[happensAt(slow_motion_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(slow_motion_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[happensAt(change_in_speed_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(change_in_speed_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
1
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
1
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
1
Body atom distances: 
[[0.25 1.   1.  ]
 [0.   0.   0.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[happensAt(change_in_heading(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25   1.     0.    ]
 [1.     0.0625 0.    ]
 [1.     0.0625 0.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.4375
Distance between rules: 
0.390625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25   1.     0.    ]
 [1.     0.0625 0.    ]
 [1.     0.0625 0.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.4375
Distance between rules: 
0.390625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[0.25   1.     1.     1.    ]
 [1.     1.     1.     0.0625]
 [1.     1.     1.     0.0625]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
1.3125
Distance between rule bodies: 
0.578125
Distance between rules: 
0.5125000000000001

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[0.25   1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     0.0625]
 [1.     1.     1.     1.     1.     0.0625]
 [0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 5 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.3125
Distance between rule bodies: 
0.71875
Distance between rules: 
0.6517857142857143

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7000000000000001

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[0.25   1.     1.     1.     1.    ]
 [1.     1.     1.     1.     0.0625]
 [1.     1.     1.     1.     0.0625]
 [0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 4 1 2 3]
Sum of distances for optimal body condition assignment: 
1.3125
Distance between rule bodies: 
0.6625000000000001
Distance between rules: 
0.59375

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[0.25   1.     0.    ]
 [1.     0.0625 0.    ]
 [1.     0.0625 0.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.4375
Distance between rules: 
0.390625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
0.25
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(highSpeedNearCoast(Vessel),T) :- 
	happensAt(enterCoastalZone(Vessel),T),
	holdsAt(=(highSpeed(Vessel),true),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(enterCoastalZone(Vessel),T), holdsAt(=(highSpeed(Vessel),true),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[1.  0.5]
 [0.  0. ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[1.  0.5]
 [0.  0. ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(stop_end(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(slow_motion_start(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(slow_motion_end(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(change_in_speed_start(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(change_in_speed_end(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
1
Body atom distances: 
[[1.  1.  0.5 1. ]
 [0.  0.  0.  0. ]
 [0.  0.  0.  0. ]
 [0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[2 0 1 3]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
1
Body atom distances: 
[[1.  1.  0.5]
 [0.  0.  0. ]
 [0.  0.  0. ]]
Optimal Body Condition Assignment: 
[2 0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
1
Body atom distances: 
[[1.  1.  1.  0.5]
 [0.  0.  0.  0. ]
 [0.  0.  0.  0. ]
 [0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[3 0 1 2]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
1
Body atom distances: 
[[1.  1.  0.5 0.5 1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[2 0 1 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[ 1  0  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
1
Body atom distances: 
[[1.  1.  1.  0.5]
 [0.  0.  0.  0. ]
 [0.  0.  0.  0. ]
 [0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[3 0 1 2]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(change_in_heading(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[-(holdsAt(holdsAt(=(highSpeed(Vessel),true),T))), _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[1.  0.5]
 [0.  0. ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[1.  0.5]
 [0.  0. ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(stop_end(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(slow_motion_start(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(slow_motion_end(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(change_in_speed_start(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(change_in_speed_end(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
1
Body atom distances: 
[[1.  1.  0.5 1. ]
 [0.  0.  0.  0. ]
 [0.  0.  0.  0. ]
 [0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[2 0 1 3]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
1
Body atom distances: 
[[1.  1.  0.5]
 [0.  0.  0. ]
 [0.  0.  0. ]]
Optimal Body Condition Assignment: 
[2 0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
1
Body atom distances: 
[[1.  1.  1.  0.5]
 [0.  0.  0.  0. ]
 [0.  0.  0.  0. ]
 [0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[3 0 1 2]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
1
Body atom distances: 
[[1.  1.  0.5 0.5 1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[2 0 1 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[ 1  0  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
1
Body atom distances: 
[[1.  1.  1.  0.5]
 [0.  0.  0.  0. ]
 [0.  0.  0.  0. ]
 [0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[3 0 1 2]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(change_in_heading(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.25
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T)))]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.625

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(highSpeedNearCoast(Vessel),T) :- 
	-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[-(holdsAt(holdAs(=(nearCoast(Vessel),true),T))), _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   0.25 0.  ]
 [1.   0.25 0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.40625

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   0.25 0.  ]
 [1.   0.25 0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.40625

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   0.25]
 [1.   1.   1.   0.25]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.625
Distance between rules: 
0.5125000000000001

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
0.125
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
0.125
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
0.125
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
0
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   0.25]
 [1.   1.   1.   1.   1.   0.25]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 5 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6428571428571428

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   0.25]
 [1.   1.   1.   1.   0.25]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 4 1 2 3]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.7000000000000001
Distance between rules: 
0.59375

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   0.25 0.  ]
 [1.   0.25 0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.390625

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T),
	holdsAt(>(durationSinceDeviation,driftingDuration),T).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(>(deviatesFromIntendedCourse(Vessel),driftingThreshold),T), holdsAt(>(durationSinceDeviation,driftingDuration),T), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.25]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.25
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.25]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.25
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(stop_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.125
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(slow_motion_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(slow_motion_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(change_in_speed_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(change_in_speed_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   0.25]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.625
Distance between rules: 
0.7000000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
0.125
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.125
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   0.25]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 5 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.7857142857142857

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
0
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.65

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
0
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.41666666666666663

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
0
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(end(=(underWay(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.41666666666666663

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
2
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   0.25]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 4 1 2 3]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.7000000000000001
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
2
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.25]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.25
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
2
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(change_in_heading(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(gpsData(Vessel,courseOverGround),T),
	holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(gpsData(Vessel,courseOverGround),T), holdsAt(=<(abs(deviatesFromIntendedCourse(Vessel)),driftingThreshold),T), _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.25]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.25
Distance between rules: 
0.20833333333333331

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.25]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.25
Distance between rules: 
0.20833333333333331

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(stop_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(slow_motion_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(slow_motion_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(change_in_speed_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(change_in_speed_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
2
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     0.25  ]
 [0.     0.     0.     0.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.578125
Distance between rules: 
0.47500000000000003

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
2
Body atom distances: 
[[0.0625 1.     1.    ]
 [1.     1.     1.    ]
 [0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.765625

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
0.125
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
2
Body atom distances: 
[[0.0625 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6979166666666666

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
0.125
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
2
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [0.     0.     0.     0.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.6375000000000001

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
0.125
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
2
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [0.     0.     0.     0.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.6375000000000001

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
2
Body atom distances: 
[[0.0625 1.     1.    ]
 [1.     1.     1.    ]
 [0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.765625

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
2
Body atom distances: 
[[0.09375 1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      0.25   ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 5 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.34375
Distance between rule bodies: 
0.7239583333333333
Distance between rules: 
0.6294642857142857

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
2
Body atom distances: 
[[0.09375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [0.      0.      0.      0.     ]
 [0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.09375
Distance between rule bodies: 
0.7734375
Distance between rules: 
0.8187500000000001

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
2
1
Body atom distances: 
[[0.09375 0.     ]
 [1.      0.     ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.09375
Distance between rule bodies: 
0.546875
Distance between rules: 
0.6979166666666666

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(end(=(underWay(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
2
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [0.     0.     0.     0.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
2
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [0.     0.     0.     0.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
2
Body atom distances: 
[[0.09375 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.25   ]
 [0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 4 1 2 3]
Sum of distances for optimal body condition assignment: 
0.34375
Distance between rule bodies: 
0.6687500000000001
Distance between rules: 
0.5677083333333334

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
2
Body atom distances: 
[[0.09375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [0.      0.      0.      0.     ]
 [0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.09375
Distance between rule bodies: 
0.7734375
Distance between rules: 
0.8187500000000001

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.25]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
2
Body atom distances: 
[[0.0625 1.     1.    ]
 [1.     1.     1.    ]
 [0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.53125

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
2
Body atom distances: 
[[0.0625 1.     1.    ]
 [1.     1.     1.    ]
 [0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.765625

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(change_in_heading(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T)]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), holdsAt(=<(abs(-(_CoG,_TrueHeading)),headingAngleThreshold),T), _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25   1.    ]
 [1.     0.0625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.15625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25   1.    ]
 [1.     0.0625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.15625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(stop_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(slow_motion_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(slow_motion_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(change_in_speed_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(change_in_speed_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
2
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     0.5    1.    ]
 [0.     0.     0.     0.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 2 1 3]
Sum of distances for optimal body condition assignment: 
0.5625
Distance between rule bodies: 
0.640625
Distance between rules: 
0.7125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
2
Body atom distances: 
[[0.0625 1.     1.    ]
 [1.     1.     1.    ]
 [0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
2
Body atom distances: 
[[0.0625 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.8125
Distance between rules: 
0.84375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
2
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [0.     0.     0.     0.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
2
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [0.     0.     0.     0.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
0.125
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
2
Body atom distances: 
[[0.0625 1.     1.    ]
 [1.     1.     0.5   ]
 [0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.5625
Distance between rule bodies: 
0.5208333333333333
Distance between rules: 
0.42187499999999994

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
2
Body atom distances: 
[[0.09375 1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.09375
Distance between rule bodies: 
0.8489583333333333
Distance between rules: 
0.8705357142857142

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
2
Body atom distances: 
[[0.09375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [0.      0.      0.      0.     ]
 [0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.09375
Distance between rule bodies: 
0.7734375
Distance between rules: 
0.6312500000000001

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
2
1
Body atom distances: 
[[0.09375 0.     ]
 [1.      0.     ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.09375
Distance between rule bodies: 
0.546875
Distance between rules: 
0.38541666666666663

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(end(=(underWay(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
2
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [0.     0.     0.     0.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
2
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     0.5   ]
 [0.     0.     0.     0.    ]
 [0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
0.5625
Distance between rule bodies: 
0.640625
Distance between rules: 
0.525

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
2
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  0.5 0.5 1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[0 2 1 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
2
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
2
Body atom distances: 
[[0.09375 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.09375
Distance between rule bodies: 
0.8187500000000001
Distance between rules: 
0.8489583333333333

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
2
Body atom distances: 
[[0.09375 1.      1.      1.     ]
 [1.      1.      1.      0.5    ]
 [0.      0.      0.      0.     ]
 [0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
0.59375
Distance between rule bodies: 
0.6484375
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
2
Body atom distances: 
[[0.0625 1.     1.    ]
 [1.     1.     1.    ]
 [0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.765625

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
2
Body atom distances: 
[[0.0625 1.     1.    ]
 [1.     1.     1.    ]
 [0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(change_in_heading(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T))]
[happensAt(start(=(gap(Vessel),_Status)),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(_Speed,trawlingSpeed),T)).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[happensAt(velocity(Trawler,_Speed,_CoG,_TrueHeading),T), -(holdsAt(=(_Speed,trawlingSpeed),T)), _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
0.125
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(stop_end(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.125
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(slow_motion_start(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(slow_motion_end(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(change_in_speed_start(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(change_in_speed_end(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.765625

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
0.125
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.78125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
0.125
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
1
Body atom distances: 
[[1.  1.  1.  1.  0.5 1. ]
 [0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[4 0 1 2 3 5]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.9285714285714285

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.765625

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(change_in_heading(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
0.0625
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold)]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.53125

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawling(Trawler),true),T) :- 
	>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[>(abs(-(_CoG,_TrueHeading)),headingAngleThreshold), _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[1.   0.25 1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[1.   0.25 1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[1.   0.25 1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[1 0 2 3]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 =(trawlingMovement(Vessel),true) :- 
	vesselType(Vessel,fishing),
	withinArea(Vessel,fishing),
	change_in_heading(Vessel).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[vesselType(Vessel,fishing), withinArea(Vessel,fishing), change_in_heading(Vessel), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(stop_end(Vessel),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(slow_motion_start(Vessel),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(slow_motion_end(Vessel),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(change_in_speed_start(Vessel),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(change_in_speed_end(Vessel),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T), _, _, _]
7
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 6 3 0 1 2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _, _, _, _]
7
3
Body atom distances: 
[[1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 5 6 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min), _, _]
7
5
Body atom distances: 
[[1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[5 6 2 0 1 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max), _, _, _]
7
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 6 3 0 1 2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf), _, _, _]
7
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 6 3 0 1 2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _, _, _, _]
7
3
Body atom distances: 
[[1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 5 6 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I), _, _, _]
7
4
Body atom distances: 
[[0.375 0.375 0.375 1.    0.    0.    0.   ]
 [0.375 0.375 0.375 1.    0.    0.    0.   ]
 [1.    1.    1.    1.    0.    0.    0.   ]
 [0.375 0.375 0.375 1.    0.    0.    0.   ]
 [1.    1.    1.    0.5   0.    0.    0.   ]
 [1.    1.    1.    1.    0.    0.    0.   ]
 [1.    1.    1.    1.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 6 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.6607142857142857
Distance between rules: 
0.5859375

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T), _]
7
6
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[6 1 0 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr), _, _, _]
7
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 6 3 0 1 2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
0
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
7
Body atom distances: 
[[0.25       0.375      1.         0.3125     1.         1.
  1.        ]
 [0.375      0.25       1.         0.375      1.         1.
  1.        ]
 [1.         1.         0.375      1.         1.         1.
  1.        ]
 [0.3125     0.375      1.         0.25       1.         1.
  1.        ]
 [1.         1.         1.         1.         0.125      1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.4166666666666665
Distance between rule bodies: 
0.3452380952380952
Distance between rules: 
0.30208333333333326

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax), _, _, _]
7
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 6 3 0 1 2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax)), _, _, _]
7
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 6 3 0 1 2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I), _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
7
Body atom distances: 
[[0.375      1.         1.         1.         0.375      0.375
  1.         1.         1.        ]
 [0.3125     1.         1.         1.         0.3125     0.3125
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  0.5        1.         1.        ]
 [0.375      1.         1.         1.         0.375      0.375
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[0 4 6 5 1 2 8 3 7]
Sum of distances for optimal body condition assignment: 
3.7291666666666665
Distance between rule bodies: 
0.636574074074074
Distance between rules: 
0.5791666666666666

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I), _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
7
Body atom distances: 
[[0.375      1.         1.         0.375      0.375      0.28125
  0.28125    1.         1.         1.         1.         0.375
  0.375      0.375      0.375      1.         1.         1.        ]
 [0.3125     1.         1.         0.3125     0.3125     0.375
  0.375      1.         1.         1.         1.         0.28125
  0.28125    0.28125    0.28125    1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         0.5        1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      1.         1.         0.375      0.375      0.34375
  0.34375    1.         1.         1.         1.         0.375
  0.375      0.375      0.375      1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.375      0.375      1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[ 5 11  9  6  7  0 17  1  2  3  4  8 10 12 13 14 15 16]
Sum of distances for optimal body condition assignment: 
2.947916666666667
Distance between rule bodies: 
0.7748842592592593
Distance between rules: 
0.737390350877193

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _]
7
5
Body atom distances: 
[[1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[5 6 2 0 1 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax)), _, _, _]
7
4
Body atom distances: 
[[1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[4 5 6 3 0 1 2]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I), _, _]
7
5
Body atom distances: 
[[0.375      0.375      1.         1.         1.         0.
  0.        ]
 [0.3125     0.3125     1.         1.         1.         0.
  0.        ]
 [1.         1.         0.375      1.         1.         0.
  0.        ]
 [0.375      0.375      1.         1.         1.         0.
  0.        ]
 [1.         1.         1.         1.         1.         0.
  0.        ]
 [1.         1.         1.         1.         1.         0.
  0.        ]
 [1.         1.         1.         1.         0.16666667 0.
  0.        ]]
Optimal Body Condition Assignment: 
[5 1 2 0 3 6 4]
Sum of distances for optimal body condition assignment: 
2.2291666666666665
Distance between rule bodies: 
0.6041666666666665
Distance between rules: 
0.5364583333333333

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _, _, _, _]
7
3
Body atom distances: 
[[1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 5 6 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _, _, _, _]
7
3
Body atom distances: 
[[1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 5 6 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(change_in_heading(Vessel),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I), _, _, _]
7
4
Body atom distances: 
[[0.375      0.375      1.         1.         0.         0.
  0.        ]
 [0.3125     0.3125     1.         1.         0.         0.
  0.        ]
 [1.         1.         0.375      1.         0.         0.
  0.        ]
 [0.375      0.375      1.         1.         0.         0.
  0.        ]
 [1.         1.         1.         1.         0.         0.
  0.        ]
 [1.         1.         1.         1.         0.         0.
  0.        ]
 [1.         1.         1.         0.16666667 0.         0.
  0.        ]]
Optimal Body Condition Assignment: 
[4 1 2 0 6 5 3]
Sum of distances for optimal body condition assignment: 
1.2291666666666667
Distance between rule bodies: 
0.6041666666666666
Distance between rules: 
0.5364583333333333

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I), _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
7
Body atom distances: 
[[0.375      0.25       1.         0.375      0.375      1.
  1.         1.        ]
 [0.3125     0.375      1.         0.265625   0.3125     1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [0.375      0.3125     1.         0.375      0.375      1.
  1.         1.        ]
 [1.         1.         0.375      1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]]
Optimal Body Condition Assignment: 
[1 3 0 4 2 5 7 6]
Sum of distances for optimal body condition assignment: 
3.432291666666667
Distance between rule bodies: 
0.5540364583333334
Distance between rules: 
0.4994212962962963

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
7
Body atom distances: 
[[0.375   1.      0.375   0.375   0.28125 0.28125 1.      1.      1.
  1.      0.375   0.375   1.     ]
 [0.3125  1.      0.3125  0.3125  0.375   0.375   1.      1.      1.
  1.      0.28125 0.28125 1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      0.5
  1.      1.      1.      1.     ]
 [0.375   1.      0.375   0.375   0.34375 0.34375 1.      1.      1.
  1.      0.375   0.375   1.     ]
 [1.      1.      1.      1.      1.      1.      0.375   0.375   1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.
  0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[ 4 10  8  5  6  0  1  2  3  7  9 11 12]
Sum of distances for optimal body condition assignment: 
3.78125
Distance between rule bodies: 
0.7524038461538461
Distance between rules: 
0.703125

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(stop_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(slow_motion_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(slow_motion_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(change_in_speed_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(change_in_speed_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
0.0625
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
4
Body atom distances: 
[[1.  1.  1.  1. ]
 [1.  1.  1.  0.5]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.7125

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I), _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
4
Body atom distances: 
[[1.         1.         0.375      1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         0.125      1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]]
Optimal Body Condition Assignment: 
[2 4 0 6 1 3 5]
Sum of distances for optimal body condition assignment: 
1.6666666666666667
Distance between rule bodies: 
0.6666666666666666
Distance between rules: 
0.5911458333333333

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
0.03125
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I), _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
4
Body atom distances: 
[[1.         1.         1.         1.         1.         1.
  0.5        1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[6 0 1 8 2 3 4 5 7]
Sum of distances for optimal body condition assignment: 
2.666666666666667
Distance between rule bodies: 
0.8518518518518519
Distance between rules: 
0.7697916666666668

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I), _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
4
Body atom distances: 
[[1.         1.         1.         1.         1.         1.
  1.         1.         1.         0.5        1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.375      0.375      1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[ 9  7  0 17  1  2  3  4  5  6  8 10 11 12 13 14 15 16]
Sum of distances for optimal body condition assignment: 
2.041666666666667
Distance between rule bodies: 
0.8912037037037037
Distance between rules: 
0.8475877192982456

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I), _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
4
Body atom distances: 
[[1.         1.         0.375      1.         1.        ]
 [1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         0.16666667]
 [0.         0.         0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[2 0 1 4 3]
Sum of distances for optimal body condition assignment: 
2.5416666666666665
Distance between rule bodies: 
0.7083333333333334
Distance between rules: 
0.6006944444444444

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(change_in_heading(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
0.0625
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I)]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
4
Body atom distances: 
[[1.         1.         0.375      1.        ]
 [1.         1.         1.         1.        ]
 [1.         1.         1.         1.        ]
 [1.         1.         1.         0.16666667]]
Optimal Body Condition Assignment: 
[2 0 1 3]
Sum of distances for optimal body condition assignment: 
2.5416666666666665
Distance between rule bodies: 
0.6354166666666666
Distance between rules: 
0.5208333333333334

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I), _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
4
Body atom distances: 
[[1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         0.375      1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]]
Optimal Body Condition Assignment: 
[0 2 1 7 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.541666666666667
Distance between rule bodies: 
0.8177083333333334
Distance between rules: 
0.7337962962962963

Comparing rules:
 holdsFor(=(tugging(TugVessel,TowedVessel),true),I) :- 
	intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa),
	union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii),
	threshold(vtgg,Vtgg),
	intDurGreater(Ii,Vtgg,I).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
0.0625
[intersect_all(list(closeProximity(TugVessel,TowedVessel),lowSpeed(TugVessel,TowedVessel)),Isa), union_all(list(=(isTowed(TowedVessel),towing(TugVessel,TowedVessel)),=(isPulling(TugVessel),pulling(TugVessel,TowedVessel))),Ii), threshold(vtgg,Vtgg), intDurGreater(Ii,Vtgg,I), _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
4
Body atom distances: 
[[1.    1.    1.    1.    1.    1.    1.    1.    0.5   1.    1.    1.
  1.   ]
 [1.    1.    1.    1.    1.    1.    0.375 0.375 1.    1.    1.    1.
  1.   ]
 [1.    1.    1.    1.    1.    1.    1.    1.    1.    1.    1.    1.
  1.   ]
 [1.    1.    1.    1.    1.    1.    1.    1.    1.    1.    1.    1.
  1.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]]
Optimal Body Condition Assignment: 
[ 8  6  0  1  2  3  4  5  7  9 10 11 12]
Sum of distances for optimal body condition assignment: 
2.875
Distance between rule bodies: 
0.9134615384615385
Distance between rules: 
0.8526785714285715

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(stop_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(slow_motion_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(slow_motion_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(change_in_speed_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(change_in_speed_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
0.0625
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
4
Body atom distances: 
[[1.  1.  1.  1. ]
 [1.  1.  1.  0.5]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.7125

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I), _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
4
Body atom distances: 
[[1.         1.         0.375      1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         0.125      1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]]
Optimal Body Condition Assignment: 
[2 4 0 6 1 3 5]
Sum of distances for optimal body condition assignment: 
1.6666666666666667
Distance between rule bodies: 
0.6666666666666666
Distance between rules: 
0.5911458333333333

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I), _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
4
Body atom distances: 
[[1.         1.         1.         1.         1.         1.
  0.5        1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[6 0 1 8 2 3 4 5 7]
Sum of distances for optimal body condition assignment: 
2.666666666666667
Distance between rule bodies: 
0.8518518518518519
Distance between rules: 
0.7729166666666667

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I), _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
4
Body atom distances: 
[[1.         1.         1.         1.         1.         1.
  1.         1.         1.         0.5        1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.375      0.375      1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[ 9  7  0 17  1  2  3  4  5  6  8 10 11 12 13 14 15 16]
Sum of distances for optimal body condition assignment: 
2.041666666666667
Distance between rule bodies: 
0.8912037037037037
Distance between rules: 
0.8475877192982456

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I), _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
4
Body atom distances: 
[[1.         1.         0.375      1.         1.        ]
 [1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         0.16666667]
 [0.         0.         0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[2 0 1 4 3]
Sum of distances for optimal body condition assignment: 
2.5416666666666665
Distance between rule bodies: 
0.7083333333333334
Distance between rules: 
0.6006944444444444

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(change_in_heading(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
0.0625
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I)]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
4
Body atom distances: 
[[1.         1.         0.375      1.        ]
 [1.         1.         1.         1.        ]
 [1.         1.         1.         1.        ]
 [1.         1.         1.         0.16666667]]
Optimal Body Condition Assignment: 
[2 0 1 3]
Sum of distances for optimal body condition assignment: 
2.5416666666666665
Distance between rule bodies: 
0.6354166666666666
Distance between rules: 
0.5208333333333334

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I), _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
4
Body atom distances: 
[[1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         0.375      1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]]
Optimal Body Condition Assignment: 
[0 2 1 7 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.541666666666667
Distance between rule bodies: 
0.8177083333333334
Distance between rules: 
0.7337962962962963

Comparing rules:
 holdsFor(=(piloting(PilotVessel,VesselToBeManoeuvred),true),I) :- 
	intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa),
	union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii),
	threshold(vpil,Vpil),
	intDurGreater(Ii,Vpil,I).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
0.0625
[intersect_all(list(navigating(PilotVessel,specificArea),approached(VesselToBeManoeuvred,PilotVessel)),Isa), union_all(list(boarded(PilotVessel,VesselToBeManoeuvred),navigated(VesselToBeManoeuvred,PilotVessel)),Ii), threshold(vpil,Vpil), intDurGreater(Ii,Vpil,I), _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
4
Body atom distances: 
[[1.    1.    1.    1.    1.    1.    1.    1.    0.5   1.    1.    1.
  1.   ]
 [1.    1.    1.    1.    1.    1.    0.375 0.375 1.    1.    1.    1.
  1.   ]
 [1.    1.    1.    1.    1.    1.    1.    1.    1.    1.    1.    1.
  1.   ]
 [1.    1.    1.    1.    1.    1.    1.    1.    1.    1.    1.    1.
  1.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.
  0.   ]]
Optimal Body Condition Assignment: 
[ 8  6  0  1  2  3  4  5  7  9 10 11 12]
Sum of distances for optimal body condition assignment: 
2.875
Distance between rule bodies: 
0.9134615384615385
Distance between rules: 
0.8526785714285715

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(stop_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(slow_motion_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(slow_motion_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(change_in_speed_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(change_in_speed_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
0.0625
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
4
Body atom distances: 
[[1.  1.  1.  1. ]
 [1.  1.  1.  0.5]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.7125

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I), _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
4
Body atom distances: 
[[1.         1.         0.375      1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         0.5        1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]]
Optimal Body Condition Assignment: 
[2 4 0 6 1 3 5]
Sum of distances for optimal body condition assignment: 
2.2083333333333335
Distance between rule bodies: 
0.7440476190476191
Distance between rules: 
0.6588541666666667

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I), _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
4
Body atom distances: 
[[1.         1.         1.         1.         1.         1.
  0.5        1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         0.33333333]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[6 0 1 8 2 3 4 5 7]
Sum of distances for optimal body condition assignment: 
2.833333333333333
Distance between rule bodies: 
0.8703703703703702
Distance between rules: 
0.7895833333333333

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I), _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
4
Body atom distances: 
[[1.         1.         1.         1.         1.         1.
  1.         1.         1.         0.5        1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.5        0.5        1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         0.33333333]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[ 9  7  0 17  1  2  3  4  5  6  8 10 11 12 13 14 15 16]
Sum of distances for optimal body condition assignment: 
2.333333333333333
Distance between rule bodies: 
0.9074074074074073
Distance between rules: 
0.862938596491228

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I), _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
4
Body atom distances: 
[[1.         1.         0.375      1.         1.        ]
 [1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         0.33333333]
 [0.         0.         0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[2 0 1 4 3]
Sum of distances for optimal body condition assignment: 
2.7083333333333335
Distance between rule bodies: 
0.7416666666666667
Distance between rules: 
0.6284722222222222

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(change_in_heading(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
0.0625
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I)]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
4
Body atom distances: 
[[1.         1.         0.375      1.        ]
 [1.         1.         1.         1.        ]
 [1.         1.         1.         1.        ]
 [1.         1.         1.         0.33333333]]
Optimal Body Condition Assignment: 
[2 0 1 3]
Sum of distances for optimal body condition assignment: 
2.7083333333333335
Distance between rule bodies: 
0.6770833333333334
Distance between rules: 
0.5541666666666667

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I), _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
4
Body atom distances: 
[[1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         0.5        1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.33333333]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]]
Optimal Body Condition Assignment: 
[0 2 1 7 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.833333333333333
Distance between rule bodies: 
0.8541666666666666
Distance between rules: 
0.7662037037037036

Comparing rules:
 holdsFor(=(vesselRendezvous(VesselA,VesselB),true),I) :- 
	intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa),
	union_all(list(lowSpeedOrStopped(VesselB)),Isa),
	threshold(vrv,Vrv),
	intDurGreater(Ia,Vrv,I).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
0.0625
[intersect_all(list(nearby(VesselA,VesselB,openSea),lowSpeedOrStopped(VesselA)),Isa), union_all(list(lowSpeedOrStopped(VesselB)),Isa), threshold(vrv,Vrv), intDurGreater(Ia,Vrv,I), _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
4
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  0.5 0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[ 8  6  0  1  2  3  4  5  7  9 10 11 12]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.9230769230769231
Distance between rules: 
0.8616071428571428

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(stop_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(slow_motion_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(slow_motion_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(change_in_speed_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(change_in_speed_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(start(=(gap(Vessel),_GapStatus)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
0.0625
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(end(=(underWay(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
3
Body atom distances: 
[[1.         1.         0.375      1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]]
Optimal Body Condition Assignment: 
[2 0 6 1 3 4 5]
Sum of distances for optimal body condition assignment: 
1.7083333333333333
Distance between rule bodies: 
0.8154761904761904
Distance between rules: 
0.7213541666666665

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
3
Body atom distances: 
[[1.         1.         1.         1.         1.         1.
  0.5        1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         0.33333333]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[6 0 8 1 2 3 4 5 7]
Sum of distances for optimal body condition assignment: 
1.8333333333333333
Distance between rule bodies: 
0.8703703703703702
Distance between rules: 
0.7895833333333333

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
3
Body atom distances: 
[[1.         1.         1.         1.         1.         1.
  1.         1.         1.         0.5        1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         0.33333333]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.
  0.         0.         0.         0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[ 9  0 17  1  2  3  4  5  6  7  8 10 11 12 13 14 15 16]
Sum of distances for optimal body condition assignment: 
1.8333333333333333
Distance between rule bodies: 
0.9351851851851851
Distance between rules: 
0.8892543859649121

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
0.0625
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
3
Body atom distances: 
[[1.         1.         0.375      1.         1.        ]
 [1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         0.33333333]
 [0.         0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[2 0 4 1 3]
Sum of distances for optimal body condition assignment: 
1.7083333333333333
Distance between rule bodies: 
0.7416666666666667
Distance between rules: 
0.6284722222222222

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(change_in_heading(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(start(=(changingSpeed(Vessel),true)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I)]
[happensAt(start(=(gap(Vessel),_Status)),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
0.0625
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
3
Body atom distances: 
[[1.         1.         0.375      1.        ]
 [1.         1.         1.         1.        ]
 [1.         1.         1.         0.33333333]
 [0.         0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[2 0 3 1]
Sum of distances for optimal body condition assignment: 
1.7083333333333333
Distance between rule bodies: 
0.6770833333333333
Distance between rules: 
0.5541666666666666

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
0
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
3
Body atom distances: 
[[1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.33333333]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.        ]]
Optimal Body Condition Assignment: 
[0 1 7 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.3333333333333335
Distance between rule bodies: 
0.9166666666666667
Distance between rules: 
0.8148148148148149

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa),
	duration(I,longPeriod,threshold(lt,Lt)),
	intDurGreater(Ia,Lt,I).
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
0.0625
[intersect_all(list(inParticularArea(Vessel),noEvidentPurpose(Vessel)),Isa), duration(I,longPeriod,threshold(lt,Lt)), intDurGreater(Ia,Lt,I), _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
3
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[ 8  0  1  2  3  4  5  6  7  9 10 11 12]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.9615384615384616
Distance between rules: 
0.8973214285714285

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

Distance between rule heads: 
1
[_, _]
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(gap_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[_, _]
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(stop_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(slow_motion_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_start(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_speed_end(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,nearCoast),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_GapStatus)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

Distance between rule heads: 
1
[_, _, _, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), =\=(TrueHeading,511.0), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), >(AngleDiff,AdriftAngThr), holdsAt(=(underWay(Vessel),true),T)]
6
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =<(AngleDiff,AdriftAngThr)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

Distance between rule heads: 
1
[_]
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(underWay(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), -(oneIsTug(Vessel1,Vessel2)), -(oneIsPilot(Vessel1,Vessel2)), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),If), \=(If,list), holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1), holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4), relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii), thresholds(rendezvousTime,RendezvousTime), intDurGreater(Ii,RendezvousTime,I)]
18
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

Distance between rule heads: 
1
[_, _, _, _]
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

Distance between rule heads: 
1
[_, _]
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(end(=(withinArea(Vessel,fishing),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

Distance between rule heads: 
1
[_, _, _, _, _]
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

Distance between rule heads: 
1
[_, _, _]
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

Distance between rule heads: 
1
[_]
[happensAt(change_in_heading(Vessel),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(changingSpeed(Vessel),true)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

Distance between rule heads: 
1
[_]
[happensAt(start(=(gap(Vessel),_Status)),T)]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

Distance between rule heads: 
1
[_, _, _, _]
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _]
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 _dummy_rule :- 
	.
 and
holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).

Distance between rule heads: 
1
[_, _, _, _, _, _, _, _, _, _, _, _, _]
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsPilot(Vessel1,Vessel2), holdsFor(=(lowSpeed(Vessel1),true),Il1), holdsFor(=(lowSpeed(Vessel2),true),Il2), holdsFor(=(stopped(Vessel1),farFromPorts),Is1), holdsFor(=(stopped(Vessel2),farFromPorts),Is2), union_all(list(Il1,Is1),I1b), union_all(list(Il2,Is2),I2b), intersect_all(list(I1b,I2b,Ip),Ii), \=(Ii,list), holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1), holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2), relative_complement_all(Ii,list(Iw1,Iw2),I)]
13
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Rule distances: 
[[0.10416667 0.5        0.75       ... 1.         1.         1.        ]
 [0.5        0.10416667 0.421875   ... 1.         1.         1.        ]
 [0.75       0.41666667 0.0078125  ... 1.         1.         1.        ]
 ...
 [1.         1.         1.         ... 1.         1.         1.        ]
 [1.         1.         1.         ... 1.         1.         1.        ]
 [1.         1.         1.         ... 1.         1.         1.        ]]
Optimal Rule Assignment: 
[ 0  1  2  3  4  5  6  8  9 16 28 39 27 11 20 29 49 48 24 41  7 10 12 13
 14 15 17 18 19 21 22 23 25 26 30 31 32 33 34 35 36 37 38 40 42 43 44 45
 46 47 50]
Sum of distances for optimal rule assignment: 
38.66903935185185
Distance between event descriptions: 
0.758216457879448
Event Description Similarity: 
0.24178354212055198
