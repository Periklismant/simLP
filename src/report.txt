Args List singleton  term: C
Atom name: b
Args: [C]
Args List singleton  term: k
Args List many atom: [k]
Atom name: s
Args: [b(C), k]
Args List singleton  term: T
Args List many atom: [T]
Atom name: a
Args: [s(b(C),k), T]
Args List singleton  term: 3
Args List many term: [3]
Args List many term: [F, 3]
Syntax error at token RPAREN
Args List singleton  term: AreaType
Args List many term: [AreaType]
Atom name: withinArea
Args: [Vessel, AreaType]
Atom name: =
Args: withinArea(Vessel,AreaType) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(withinArea(Vessel,AreaType),true), T]
Args List singleton  term: Area
Args List many term: [Area]
Atom name: entersArea
Args: [Vessel, Area]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [entersArea(Vessel,Area), T]
Args List singleton  term: AreaType
Args List many term: [AreaType]
Atom name: areaType
Args: [Area, AreaType]
Args List singleton  term: AreaType
Args List many term: [AreaType]
Atom name: withinArea
Args: [Vessel, AreaType]
Atom name: =
Args: withinArea(Vessel,AreaType) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(withinArea(Vessel,AreaType),true), T]
Args List singleton  term: Area
Args List many term: [Area]
Atom name: leavesArea
Args: [Vessel, Area]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [leavesArea(Vessel,Area), T]
Args List singleton  term: AreaType
Args List many term: [AreaType]
Atom name: areaType
Args: [Area, AreaType]
Args List singleton  term: _AreaType
Args List many term: [_AreaType]
Atom name: withinArea
Args: [Vessel, _AreaType]
Atom name: =
Args: withinArea(Vessel,_AreaType) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(withinArea(Vessel,_AreaType),true), T]
Args List singleton  term: Vessel
Atom name: gap_start
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [gap_start(Vessel), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Atom name: =
Args: gap(Vessel) and nearPorts
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(gap(Vessel),nearPorts), T]
Args List singleton  term: Vessel
Atom name: gap_start
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [gap_start(Vessel), T]
Args List singleton  term: nearPorts
Args List many term: [nearPorts]
Atom name: withinArea
Args: [Vessel, nearPorts]
Atom name: =
Args: withinArea(Vessel,nearPorts) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(withinArea(Vessel,nearPorts),true), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Atom name: =
Args: gap(Vessel) and farFromPorts
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(gap(Vessel),farFromPorts), T]
Args List singleton  term: Vessel
Atom name: gap_start
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [gap_start(Vessel), T]
Args List singleton  term: nearPorts
Args List many term: [nearPorts]
Atom name: withinArea
Args: [Vessel, nearPorts]
Atom name: =
Args: withinArea(Vessel,nearPorts) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(withinArea(Vessel,nearPorts),true), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Atom name: =
Args: gap(Vessel) and _PortStatus
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(gap(Vessel),_PortStatus), T]
Args List singleton  term: Vessel
Atom name: gap_end
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [gap_end(Vessel), T]
Args List singleton  term: Vessel
Atom name: stopped
Args: [Vessel]
Atom name: =
Args: stopped(Vessel) and nearPorts
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(stopped(Vessel),nearPorts), T]
Args List singleton  term: Vessel
Atom name: stop_start
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [stop_start(Vessel), T]
Args List singleton  term: nearPorts
Args List many term: [nearPorts]
Atom name: withinArea
Args: [Vessel, nearPorts]
Atom name: =
Args: withinArea(Vessel,nearPorts) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(withinArea(Vessel,nearPorts),true), T]
Args List singleton  term: Vessel
Atom name: stopped
Args: [Vessel]
Atom name: =
Args: stopped(Vessel) and farFromPorts
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(stopped(Vessel),farFromPorts), T]
Args List singleton  term: Vessel
Atom name: stop_start
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [stop_start(Vessel), T]
Args List singleton  term: nearPorts
Args List many term: [nearPorts]
Atom name: withinArea
Args: [Vessel, nearPorts]
Atom name: =
Args: withinArea(Vessel,nearPorts) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(withinArea(Vessel,nearPorts),true), T]
Args List singleton  term: Vessel
Atom name: stopped
Args: [Vessel]
Atom name: =
Args: stopped(Vessel) and _Status
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(stopped(Vessel),_Status), T]
Args List singleton  term: Vessel
Atom name: stop_end
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [stop_end(Vessel), T]
Args List singleton  term: Vessel
Atom name: stopped
Args: [Vessel]
Atom name: =
Args: stopped(Vessel) and _Status
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(stopped(Vessel),_Status), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: lowSpeed
Args: [Vessel]
Atom name: =
Args: lowSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(lowSpeed(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: slow_motion_start
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [slow_motion_start(Vessel), T]
Args List singleton  term: Vessel
Atom name: lowSpeed
Args: [Vessel]
Atom name: =
Args: lowSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(lowSpeed(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: slow_motion_end
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [slow_motion_end(Vessel), T]
Args List singleton  term: Vessel
Atom name: lowSpeed
Args: [Vessel]
Atom name: =
Args: lowSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(lowSpeed(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: changingSpeed
Args: [Vessel]
Atom name: =
Args: changingSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(changingSpeed(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: change_in_speed_start
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [change_in_speed_start(Vessel), T]
Args List singleton  term: Vessel
Atom name: changingSpeed
Args: [Vessel]
Atom name: =
Args: changingSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(changingSpeed(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: change_in_speed_end
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [change_in_speed_end(Vessel), T]
Args List singleton  term: Vessel
Atom name: changingSpeed
Args: [Vessel]
Atom name: =
Args: changingSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(changingSpeed(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: highSpeedNearCoast
Args: [Vessel]
Atom name: =
Args: highSpeedNearCoast(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(highSpeedNearCoast(Vessel),true), T]
Args List singleton  term: _
Args List many term: [_]
Args List many term: [_, _]
Args List many term: [Speed, _, _]
Atom name: velocity
Args: [Vessel, Speed, _, _]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,_,_), T]
Args List singleton  term: HcNearCoastMax
Args List many term: [HcNearCoastMax]
Atom name: thresholds
Args: [hcNearCoastMax, HcNearCoastMax]
Args List singleton  term: HcNearCoastMax
Args List many term: [HcNearCoastMax]
Args List many term: [0, HcNearCoastMax]
Atom name: inRange
Args: [Speed, 0, HcNearCoastMax]
Args List singleton  term: nearCoast
Args List many term: [nearCoast]
Atom name: withinArea
Args: [Vessel, nearCoast]
Atom name: =
Args: withinArea(Vessel,nearCoast) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(withinArea(Vessel,nearCoast),true), T]
Args List singleton  term: Vessel
Atom name: highSpeedNearCoast
Args: [Vessel]
Atom name: =
Args: highSpeedNearCoast(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(highSpeedNearCoast(Vessel),true), T]
Args List singleton  term: _
Args List many term: [_]
Args List many term: [_, _]
Args List many term: [Speed, _, _]
Atom name: velocity
Args: [Vessel, Speed, _, _]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,_,_), T]
Args List singleton  term: HcNearCoastMax
Args List many term: [HcNearCoastMax]
Atom name: thresholds
Args: [hcNearCoastMax, HcNearCoastMax]
Args List singleton  term: HcNearCoastMax
Args List many term: [HcNearCoastMax]
Args List many term: [0, HcNearCoastMax]
Atom name: inRange
Args: [Speed, 0, HcNearCoastMax]
Args List singleton  term: Vessel
Atom name: highSpeedNearCoast
Args: [Vessel]
Atom name: =
Args: highSpeedNearCoast(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(highSpeedNearCoast(Vessel),true), T]
Args List singleton  term: nearCoast
Args List many term: [nearCoast]
Atom name: withinArea
Args: [Vessel, nearCoast]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: movingSpeed
Args: [Vessel]
Atom name: =
Args: movingSpeed(Vessel) and below
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(movingSpeed(Vessel),below), T]
Args List singleton  term: _
Args List many term: [_]
Args List many term: [_, _]
Args List many term: [Speed, _, _]
Atom name: velocity
Args: [Vessel, Speed, _, _]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,_,_), T]
Args List singleton  term: Type
Args List many term: [Type]
Atom name: vesselType
Args: [Vessel, Type]
Args List singleton  term: _Avg
Args List many term: [_Avg]
Args List many term: [_Max, _Avg]
Args List many term: [Min, _Max, _Avg]
Atom name: typeSpeed
Args: [Type, Min, _Max, _Avg]
Args List singleton  term: MovingMin
Args List many term: [MovingMin]
Atom name: thresholds
Args: [movingMin, MovingMin]
Args List singleton  term: Min
Args List many term: [Min]
Args List many term: [MovingMin, Min]
Atom name: inRange
Args: [Speed, MovingMin, Min]
Args List singleton  term: Vessel
Atom name: movingSpeed
Args: [Vessel]
Atom name: =
Args: movingSpeed(Vessel) and normal
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(movingSpeed(Vessel),normal), T]
Args List singleton  term: _
Args List many term: [_]
Args List many term: [_, _]
Args List many term: [Speed, _, _]
Atom name: velocity
Args: [Vessel, Speed, _, _]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,_,_), T]
Args List singleton  term: Type
Args List many term: [Type]
Atom name: vesselType
Args: [Vessel, Type]
Args List singleton  term: _Avg
Args List many term: [_Avg]
Args List many term: [Max, _Avg]
Args List many term: [Min, Max, _Avg]
Atom name: typeSpeed
Args: [Type, Min, Max, _Avg]
Args List singleton  term: Max
Args List many term: [Max]
Args List many term: [Min, Max]
Atom name: inRange
Args: [Speed, Min, Max]
Args List singleton  term: Vessel
Atom name: movingSpeed
Args: [Vessel]
Atom name: =
Args: movingSpeed(Vessel) and above
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(movingSpeed(Vessel),above), T]
Args List singleton  term: _
Args List many term: [_]
Args List many term: [_, _]
Args List many term: [Speed, _, _]
Atom name: velocity
Args: [Vessel, Speed, _, _]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,_,_), T]
Args List singleton  term: Type
Args List many term: [Type]
Atom name: vesselType
Args: [Vessel, Type]
Args List singleton  term: _Avg
Args List many term: [_Avg]
Args List many term: [Max, _Avg]
Args List many term: [_Min, Max, _Avg]
Atom name: typeSpeed
Args: [Type, _Min, Max, _Avg]
Args List singleton  term: inf
Args List many term: [inf]
Args List many term: [Max, inf]
Atom name: inRange
Args: [Speed, Max, inf]
Args List singleton  term: Vessel
Atom name: movingSpeed
Args: [Vessel]
Atom name: =
Args: movingSpeed(Vessel) and _Status
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(movingSpeed(Vessel),_Status), T]
Args List singleton  term: _
Args List many term: [_]
Args List many term: [_, _]
Args List many term: [Speed, _, _]
Atom name: velocity
Args: [Vessel, Speed, _, _]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,_,_), T]
Args List singleton  term: MovingMin
Args List many term: [MovingMin]
Atom name: thresholds
Args: [movingMin, MovingMin]
Args List singleton  term: inf
Args List many term: [inf]
Args List many term: [MovingMin, inf]
Atom name: inRange
Args: [Speed, MovingMin, inf]
Args List singleton  term: Vessel
Atom name: movingSpeed
Args: [Vessel]
Atom name: =
Args: movingSpeed(Vessel) and _Status
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(movingSpeed(Vessel),_Status), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: underWay
Args: [Vessel]
Atom name: =
Args: underWay(Vessel) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(underWay(Vessel),true), I]
Args List singleton  term: Vessel
Atom name: movingSpeed
Args: [Vessel]
Atom name: =
Args: movingSpeed(Vessel) and below
Args List singleton  term: I1
Args List many atom: [I1]
Atom name: holdsFor
Args: [=(movingSpeed(Vessel),below), I1]
Args List singleton  term: Vessel
Atom name: movingSpeed
Args: [Vessel]
Atom name: =
Args: movingSpeed(Vessel) and normal
Args List singleton  term: I2
Args List many atom: [I2]
Atom name: holdsFor
Args: [=(movingSpeed(Vessel),normal), I2]
Args List singleton  term: Vessel
Atom name: movingSpeed
Args: [Vessel]
Atom name: =
Args: movingSpeed(Vessel) and above
Args List singleton  term: I3
Args List many atom: [I3]
Atom name: holdsFor
Args: [=(movingSpeed(Vessel),above), I3]
Args List singleton  term: I3
Args List many term: [I3]
Args List many term: [I2, I3]
Args List singleton  term: I
Args List many list: [I]
Atom name: union_all
Args: [list(I1,I2,I3), I]
Args List singleton  term: Vessel
Atom name: drifting
Args: [Vessel]
Atom name: =
Args: drifting(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(drifting(Vessel),true), T]
Args List singleton  term: TrueHeading
Args List many term: [TrueHeading]
Args List many term: [CourseOverGround, TrueHeading]
Args List many term: [_Speed, CourseOverGround, TrueHeading]
Atom name: velocity
Args: [Vessel, _Speed, CourseOverGround, TrueHeading]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,_Speed,CourseOverGround,TrueHeading), T]
Illegal character '\'
Syntax error at token EQUAL
Args List singleton  term: AngleDiff
Args List many term: [AngleDiff]
Args List many term: [TrueHeading, AngleDiff]
Atom name: absoluteAngleDiff
Args: [CourseOverGround, TrueHeading, AngleDiff]
Syntax error at token COMMA
Args List singleton  term: AdriftAngThr
Args List many term: [AdriftAngThr]
Atom name: thresholds
Args: [adriftAngThr, AdriftAngThr]
Syntax error at token COMMA
Illegal character '>'
Args List singleton  term: Vessel
Atom name: underWay
Args: [Vessel]
Atom name: =
Args: underWay(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(underWay(Vessel),true), T]
Syntax error at token DOT
Args List singleton  term: Vessel
Atom name: drifting
Args: [Vessel]
Atom name: =
Args: drifting(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(drifting(Vessel),true), T]
Args List singleton  term: TrueHeading
Args List many term: [TrueHeading]
Args List many term: [CourseOverGround, TrueHeading]
Args List many term: [_Speed, CourseOverGround, TrueHeading]
Atom name: velocity
Args: [Vessel, _Speed, CourseOverGround, TrueHeading]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,_Speed,CourseOverGround,TrueHeading), T]
Args List singleton  term: AngleDiff
Args List many term: [AngleDiff]
Args List many term: [TrueHeading, AngleDiff]
Atom name: absoluteAngleDiff
Args: [CourseOverGround, TrueHeading, AngleDiff]
Args List singleton  term: AdriftAngThr
Args List many term: [AdriftAngThr]
Atom name: thresholds
Args: [adriftAngThr, AdriftAngThr]
Illegal character '<'
Atom name: =
Args: AngleDiff and AdriftAngThr
Args List singleton  term: Vessel
Atom name: drifting
Args: [Vessel]
Atom name: =
Args: drifting(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(drifting(Vessel),true), T]
Args List singleton  term: 511.0
Args List many term: [511.0]
Args List many term: [_CourseOverGround, 511.0]
Args List many term: [_Speed, _CourseOverGround, 511.0]
Atom name: velocity
Args: [Vessel, _Speed, _CourseOverGround, 511.0]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,_Speed,_CourseOverGround,511.0), T]
Args List singleton  term: Vessel
Atom name: drifting
Args: [Vessel]
Atom name: =
Args: drifting(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(drifting(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: underWay
Args: [Vessel]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: anchoredOrMoored
Args: [Vessel]
Atom name: =
Args: anchoredOrMoored(Vessel) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(anchoredOrMoored(Vessel),true), I]
Args List singleton  term: Vessel
Atom name: stopped
Args: [Vessel]
Atom name: =
Args: stopped(Vessel) and farFromPorts
Args List singleton  term: Istfp
Args List many atom: [Istfp]
Atom name: holdsFor
Args: [=(stopped(Vessel),farFromPorts), Istfp]
Args List singleton  term: anchorage
Args List many term: [anchorage]
Atom name: withinArea
Args: [Vessel, anchorage]
Atom name: =
Args: withinArea(Vessel,anchorage) and true
Args List singleton  term: Ia
Args List many atom: [Ia]
Atom name: holdsFor
Args: [=(withinArea(Vessel,anchorage),true), Ia]
Args List singleton  term: Ia
Args List many term: [Ia]
Args List singleton  term: Ista
Args List many list: [Ista]
Atom name: intersect_all
Args: [list(Istfp,Ia), Ista]
Args List singleton  term: Vessel
Atom name: stopped
Args: [Vessel]
Atom name: =
Args: stopped(Vessel) and nearPorts
Args List singleton  term: Istnp
Args List many atom: [Istnp]
Atom name: holdsFor
Args: [=(stopped(Vessel),nearPorts), Istnp]
Args List singleton  term: Istnp
Args List many term: [Istnp]
Args List singleton  term: Ii
Args List many list: [Ii]
Atom name: union_all
Args: [list(Ista,Istnp), Ii]
Args List singleton  term: AOrMTime
Args List many term: [AOrMTime]
Atom name: thresholds
Args: [aOrMTime, AOrMTime]
Args List singleton  term: I
Args List many term: [I]
Args List many term: [AOrMTime, I]
Atom name: intDurGreater
Args: [Ii, AOrMTime, I]
Args List singleton  term: Vessel
Atom name: tuggingSpeed
Args: [Vessel]
Atom name: =
Args: tuggingSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(tuggingSpeed(Vessel),true), T]
Args List singleton  term: _
Args List many term: [_]
Args List many term: [_, _]
Args List many term: [Speed, _, _]
Atom name: velocity
Args: [Vessel, Speed, _, _]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,_,_), T]
Args List singleton  term: TuggingMin
Args List many term: [TuggingMin]
Atom name: thresholds
Args: [tuggingMin, TuggingMin]
Args List singleton  term: TuggingMax
Args List many term: [TuggingMax]
Atom name: thresholds
Args: [tuggingMax, TuggingMax]
Args List singleton  term: TuggingMax
Args List many term: [TuggingMax]
Args List many term: [TuggingMin, TuggingMax]
Atom name: inRange
Args: [Speed, TuggingMin, TuggingMax]
Args List singleton  term: Vessel
Atom name: tuggingSpeed
Args: [Vessel]
Atom name: =
Args: tuggingSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(tuggingSpeed(Vessel),true), T]
Args List singleton  term: _
Args List many term: [_]
Args List many term: [_, _]
Args List many term: [Speed, _, _]
Atom name: velocity
Args: [Vessel, Speed, _, _]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,_,_), T]
Args List singleton  term: TuggingMin
Args List many term: [TuggingMin]
Atom name: thresholds
Args: [tuggingMin, TuggingMin]
Args List singleton  term: TuggingMax
Args List many term: [TuggingMax]
Atom name: thresholds
Args: [tuggingMax, TuggingMax]
Args List singleton  term: TuggingMax
Args List many term: [TuggingMax]
Args List many term: [TuggingMin, TuggingMax]
Atom name: inRange
Args: [Speed, TuggingMin, TuggingMax]
Args List singleton  term: Vessel
Atom name: tuggingSpeed
Args: [Vessel]
Atom name: =
Args: tuggingSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(tuggingSpeed(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Syntax error at token RPAREN
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: tugging
Args: [Vessel1, Vessel2]
Atom name: =
Args: tugging(Vessel1,Vessel2) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(tugging(Vessel1,Vessel2),true), I]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: proximity
Args: [Vessel1, Vessel2]
Atom name: =
Args: proximity(Vessel1,Vessel2) and true
Args List singleton  term: Ip
Args List many atom: [Ip]
Atom name: holdsFor
Args: [=(proximity(Vessel1,Vessel2),true), Ip]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: oneIsTug
Args: [Vessel1, Vessel2]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: oneIsPilot
Args: [Vessel1, Vessel2]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: twoAreTugs
Args: [Vessel1, Vessel2]
Args List singleton  term: Vessel1
Atom name: tuggingSpeed
Args: [Vessel1]
Atom name: =
Args: tuggingSpeed(Vessel1) and true
Args List singleton  term: Its1
Args List many atom: [Its1]
Atom name: holdsFor
Args: [=(tuggingSpeed(Vessel1),true), Its1]
Args List singleton  term: Vessel2
Atom name: tuggingSpeed
Args: [Vessel2]
Atom name: =
Args: tuggingSpeed(Vessel2) and true
Args List singleton  term: Its2
Args List many atom: [Its2]
Atom name: holdsFor
Args: [=(tuggingSpeed(Vessel2),true), Its2]
Args List singleton  term: Its2
Args List many term: [Its2]
Args List many term: [Its1, Its2]
Args List singleton  term: Ii
Args List many list: [Ii]
Atom name: intersect_all
Args: [list(Ip,Its1,Its2), Ii]
Args List singleton  term: TuggingTime
Args List many term: [TuggingTime]
Atom name: thresholds
Args: [tuggingTime, TuggingTime]
Args List singleton  term: I
Args List many term: [I]
Args List many term: [TuggingTime, I]
Atom name: intDurGreater
Args: [Ii, TuggingTime, I]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: rendezVous
Args: [Vessel1, Vessel2]
Atom name: =
Args: rendezVous(Vessel1,Vessel2) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(rendezVous(Vessel1,Vessel2),true), I]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: proximity
Args: [Vessel1, Vessel2]
Atom name: =
Args: proximity(Vessel1,Vessel2) and true
Args List singleton  term: Ip
Args List many atom: [Ip]
Atom name: holdsFor
Args: [=(proximity(Vessel1,Vessel2),true), Ip]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: oneIsTug
Args: [Vessel1, Vessel2]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: oneIsPilot
Args: [Vessel1, Vessel2]
Args List singleton  term: Vessel1
Atom name: lowSpeed
Args: [Vessel1]
Atom name: =
Args: lowSpeed(Vessel1) and true
Args List singleton  term: Il1
Args List many atom: [Il1]
Atom name: holdsFor
Args: [=(lowSpeed(Vessel1),true), Il1]
Args List singleton  term: Vessel2
Atom name: lowSpeed
Args: [Vessel2]
Atom name: =
Args: lowSpeed(Vessel2) and true
Args List singleton  term: Il2
Args List many atom: [Il2]
Atom name: holdsFor
Args: [=(lowSpeed(Vessel2),true), Il2]
Args List singleton  term: Vessel1
Atom name: stopped
Args: [Vessel1]
Atom name: =
Args: stopped(Vessel1) and farFromPorts
Args List singleton  term: Is1
Args List many atom: [Is1]
Atom name: holdsFor
Args: [=(stopped(Vessel1),farFromPorts), Is1]
Args List singleton  term: Vessel2
Atom name: stopped
Args: [Vessel2]
Atom name: =
Args: stopped(Vessel2) and farFromPorts
Args List singleton  term: Is2
Args List many atom: [Is2]
Atom name: holdsFor
Args: [=(stopped(Vessel2),farFromPorts), Is2]
Args List singleton  term: Is1
Args List many term: [Is1]
Args List singleton  term: I1b
Args List many list: [I1b]
Atom name: union_all
Args: [list(Il1,Is1), I1b]
Args List singleton  term: Is2
Args List many term: [Is2]
Args List singleton  term: I2b
Args List many list: [I2b]
Atom name: union_all
Args: [list(Il2,Is2), I2b]
Args List singleton  term: Ip
Args List many term: [Ip]
Args List many term: [I2b, Ip]
Args List singleton  term: If
Args List many list: [If]
Atom name: intersect_all
Args: [list(I1b,I2b,Ip), If]
Illegal character '\'
Syntax error at token LISTSTART
Args List singleton  term: nearPorts
Args List many term: [nearPorts]
Atom name: withinArea
Args: [Vessel1, nearPorts]
Atom name: =
Args: withinArea(Vessel1,nearPorts) and true
Args List singleton  term: Iw1
Args List many atom: [Iw1]
Atom name: holdsFor
Args: [=(withinArea(Vessel1,nearPorts),true), Iw1]
Syntax error at token COMMA
Args List singleton  term: nearPorts
Args List many term: [nearPorts]
Atom name: withinArea
Args: [Vessel2, nearPorts]
Atom name: =
Args: withinArea(Vessel2,nearPorts) and true
Args List singleton  term: Iw2
Args List many atom: [Iw2]
Atom name: holdsFor
Args: [=(withinArea(Vessel2,nearPorts),true), Iw2]
Syntax error at token COMMA
Args List singleton  term: nearCoast
Args List many term: [nearCoast]
Atom name: withinArea
Args: [Vessel1, nearCoast]
Atom name: =
Args: withinArea(Vessel1,nearCoast) and true
Args List singleton  term: Iw3
Args List many atom: [Iw3]
Atom name: holdsFor
Args: [=(withinArea(Vessel1,nearCoast),true), Iw3]
Syntax error at token COMMA
Args List singleton  term: nearCoast
Args List many term: [nearCoast]
Atom name: withinArea
Args: [Vessel2, nearCoast]
Atom name: =
Args: withinArea(Vessel2,nearCoast) and true
Args List singleton  term: Iw4
Args List many atom: [Iw4]
Atom name: holdsFor
Args: [=(withinArea(Vessel2,nearCoast),true), Iw4]
Syntax error at token COMMA
Args List singleton  term: Iw4
Args List many term: [Iw4]
Args List many term: [Iw3, Iw4]
Args List many term: [Iw2, Iw3, Iw4]
Args List singleton  term: Ii
Args List many list: [Ii]
Args List many term: [list(Iw1,Iw2,Iw3,Iw4), Ii]
Atom name: relative_complement_all
Args: [If, list(Iw1,Iw2,Iw3,Iw4), Ii]
Syntax error at token COMMA
Args List singleton  term: RendezvousTime
Args List many term: [RendezvousTime]
Atom name: thresholds
Args: [rendezvousTime, RendezvousTime]
Syntax error at token COMMA
Args List singleton  term: I
Args List many term: [I]
Args List many term: [RendezvousTime, I]
Atom name: intDurGreater
Args: [Ii, RendezvousTime, I]
Syntax error at token DOT
Args List singleton  term: Vessel
Atom name: trawlSpeed
Args: [Vessel]
Atom name: =
Args: trawlSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(trawlSpeed(Vessel),true), T]
Args List singleton  term: _
Args List many term: [_]
Args List many term: [_Heading, _]
Args List many term: [Speed, _Heading, _]
Atom name: velocity
Args: [Vessel, Speed, _Heading, _]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,_Heading,_), T]
Args List singleton  term: TrawlspeedMin
Args List many term: [TrawlspeedMin]
Atom name: thresholds
Args: [trawlspeedMin, TrawlspeedMin]
Args List singleton  term: TrawlspeedMax
Args List many term: [TrawlspeedMax]
Atom name: thresholds
Args: [trawlspeedMax, TrawlspeedMax]
Args List singleton  term: TrawlspeedMax
Args List many term: [TrawlspeedMax]
Args List many term: [TrawlspeedMin, TrawlspeedMax]
Atom name: inRange
Args: [Speed, TrawlspeedMin, TrawlspeedMax]
Args List singleton  term: fishing
Args List many term: [fishing]
Atom name: withinArea
Args: [Vessel, fishing]
Atom name: =
Args: withinArea(Vessel,fishing) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(withinArea(Vessel,fishing),true), T]
Args List singleton  term: Vessel
Atom name: trawlSpeed
Args: [Vessel]
Atom name: =
Args: trawlSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(trawlSpeed(Vessel),true), T]
Args List singleton  term: _
Args List many term: [_]
Args List many term: [_Heading, _]
Args List many term: [Speed, _Heading, _]
Atom name: velocity
Args: [Vessel, Speed, _Heading, _]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,_Heading,_), T]
Args List singleton  term: TrawlspeedMin
Args List many term: [TrawlspeedMin]
Atom name: thresholds
Args: [trawlspeedMin, TrawlspeedMin]
Args List singleton  term: TrawlspeedMax
Args List many term: [TrawlspeedMax]
Atom name: thresholds
Args: [trawlspeedMax, TrawlspeedMax]
Args List singleton  term: TrawlspeedMax
Args List many term: [TrawlspeedMax]
Args List many term: [TrawlspeedMin, TrawlspeedMax]
Atom name: inRange
Args: [Speed, TrawlspeedMin, TrawlspeedMax]
Args List singleton  term: Vessel
Atom name: trawlSpeed
Args: [Vessel]
Atom name: =
Args: trawlSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(trawlSpeed(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: trawlSpeed
Args: [Vessel]
Atom name: =
Args: trawlSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(trawlSpeed(Vessel),true), T]
Args List singleton  term: fishing
Args List many term: [fishing]
Atom name: withinArea
Args: [Vessel, fishing]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: trawlingMovement
Args: [Vessel]
Atom name: =
Args: trawlingMovement(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(trawlingMovement(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: change_in_heading
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [change_in_heading(Vessel), T]
Args List singleton  term: fishing
Args List many term: [fishing]
Atom name: withinArea
Args: [Vessel, fishing]
Atom name: =
Args: withinArea(Vessel,fishing) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(withinArea(Vessel,fishing),true), T]
Args List singleton  term: Vessel
Atom name: trawlingMovement
Args: [Vessel]
Atom name: =
Args: trawlingMovement(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(trawlingMovement(Vessel),true), T]
Args List singleton  term: fishing
Args List many term: [fishing]
Atom name: withinArea
Args: [Vessel, fishing]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: trawlingMovement
Args: [Vessel]
Atom name: =
Args: trawlingMovement(Vessel) and true
Args List singleton  term: Vessel
Atom name: trawlingMovement
Args: [Vessel]
Atom name: =
Args: trawlingMovement(Vessel) and false
Args List singleton  term: TrawlingCrs
Args List many atom: [TrawlingCrs]
Args List many atom: [=(trawlingMovement(Vessel),false), TrawlingCrs]
Atom name: fi
Args: [=(trawlingMovement(Vessel),true), =(trawlingMovement(Vessel),false), TrawlingCrs]
Args List singleton  term: TrawlingCrs
Args List many term: [TrawlingCrs]
Atom name: thresholds
Args: [trawlingCrs, TrawlingCrs]
Args List singleton  term: _Vessel
Atom name: trawlingMovement
Args: [_Vessel]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: trawling
Args: [Vessel]
Atom name: =
Args: trawling(Vessel) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(trawling(Vessel),true), I]
Args List singleton  term: Vessel
Atom name: trawlSpeed
Args: [Vessel]
Atom name: =
Args: trawlSpeed(Vessel) and true
Args List singleton  term: It
Args List many atom: [It]
Atom name: holdsFor
Args: [=(trawlSpeed(Vessel),true), It]
Args List singleton  term: Vessel
Atom name: trawlingMovement
Args: [Vessel]
Atom name: =
Args: trawlingMovement(Vessel) and true
Args List singleton  term: Itc
Args List many atom: [Itc]
Atom name: holdsFor
Args: [=(trawlingMovement(Vessel),true), Itc]
Args List singleton  term: Itc
Args List many term: [Itc]
Args List singleton  term: Ii
Args List many list: [Ii]
Atom name: intersect_all
Args: [list(It,Itc), Ii]
Args List singleton  term: TrawlingTime
Args List many term: [TrawlingTime]
Atom name: thresholds
Args: [trawlingTime, TrawlingTime]
Args List singleton  term: I
Args List many term: [I]
Args List many term: [TrawlingTime, I]
Atom name: intDurGreater
Args: [Ii, TrawlingTime, I]
Args List singleton  term: Vessel
Atom name: sarSpeed
Args: [Vessel]
Atom name: =
Args: sarSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(sarSpeed(Vessel),true), T]
Args List singleton  term: _
Args List many term: [_]
Args List many term: [_, _]
Args List many term: [Speed, _, _]
Atom name: velocity
Args: [Vessel, Speed, _, _]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,_,_), T]
Args List singleton  term: SarMinSpeed
Args List many term: [SarMinSpeed]
Atom name: thresholds
Args: [sarMinSpeed, SarMinSpeed]
Args List singleton  term: inf
Args List many term: [inf]
Args List many term: [SarMinSpeed, inf]
Atom name: inRange
Args: [Speed, SarMinSpeed, inf]
Args List singleton  term: Vessel
Atom name: sarSpeed
Args: [Vessel]
Atom name: =
Args: sarSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(sarSpeed(Vessel),true), T]
Args List singleton  term: _
Args List many term: [_]
Args List many term: [_, _]
Args List many term: [Speed, _, _]
Atom name: velocity
Args: [Vessel, Speed, _, _]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,_,_), T]
Args List singleton  term: SarMinSpeed
Args List many term: [SarMinSpeed]
Atom name: thresholds
Args: [sarMinSpeed, SarMinSpeed]
Args List singleton  term: SarMinSpeed
Args List many term: [SarMinSpeed]
Args List many term: [0, SarMinSpeed]
Atom name: inRange
Args: [Speed, 0, SarMinSpeed]
Args List singleton  term: Vessel
Atom name: sarSpeed
Args: [Vessel]
Atom name: =
Args: sarSpeed(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(sarSpeed(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: sarMovement
Args: [Vessel]
Atom name: =
Args: sarMovement(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(sarMovement(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: change_in_heading
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [change_in_heading(Vessel), T]
Args List singleton  term: Vessel
Atom name: sarMovement
Args: [Vessel]
Atom name: =
Args: sarMovement(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(sarMovement(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: changingSpeed
Args: [Vessel]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: sarMovement
Args: [Vessel]
Atom name: =
Args: sarMovement(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(sarMovement(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: sarMovement
Args: [Vessel]
Atom name: =
Args: sarMovement(Vessel) and true
Args List singleton  term: Vessel
Atom name: sarMovement
Args: [Vessel]
Atom name: =
Args: sarMovement(Vessel) and false
Args List singleton  term: 1800
Args List many atom: [1800]
Args List many atom: [=(sarMovement(Vessel),false), 1800]
Atom name: fi
Args: [=(sarMovement(Vessel),true), =(sarMovement(Vessel),false), 1800]
Syntax error at token DOT
Args List singleton  term: _Vessel
Atom name: sarMovement
Args: [_Vessel]
Syntax error at token RPAREN
Args List singleton  term: Vessel
Atom name: inSAR
Args: [Vessel]
Atom name: =
Args: inSAR(Vessel) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(inSAR(Vessel),true), I]
Args List singleton  term: Vessel
Atom name: sarSpeed
Args: [Vessel]
Atom name: =
Args: sarSpeed(Vessel) and true
Args List singleton  term: Iss
Args List many atom: [Iss]
Atom name: holdsFor
Args: [=(sarSpeed(Vessel),true), Iss]
Args List singleton  term: Vessel
Atom name: sarMovement
Args: [Vessel]
Atom name: =
Args: sarMovement(Vessel) and true
Args List singleton  term: Isc
Args List many atom: [Isc]
Atom name: holdsFor
Args: [=(sarMovement(Vessel),true), Isc]
Args List singleton  term: Isc
Args List many term: [Isc]
Args List singleton  term: Ii
Args List many list: [Ii]
Atom name: intersect_all
Args: [list(Iss,Isc), Ii]
Args List singleton  term: I
Args List many term: [I]
Args List many term: [3600, I]
Atom name: intDurGreater
Args: [Ii, 3600, I]
Args List singleton  term: Vessel
Atom name: loitering
Args: [Vessel]
Atom name: =
Args: loitering(Vessel) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(loitering(Vessel),true), I]
Args List singleton  term: Vessel
Atom name: lowSpeed
Args: [Vessel]
Atom name: =
Args: lowSpeed(Vessel) and true
Args List singleton  term: Il
Args List many atom: [Il]
Atom name: holdsFor
Args: [=(lowSpeed(Vessel),true), Il]
Args List singleton  term: Vessel
Atom name: stopped
Args: [Vessel]
Atom name: =
Args: stopped(Vessel) and farFromPorts
Args List singleton  term: Is
Args List many atom: [Is]
Atom name: holdsFor
Args: [=(stopped(Vessel),farFromPorts), Is]
Args List singleton  term: Is
Args List many term: [Is]
Args List singleton  term: Ils
Args List many list: [Ils]
Atom name: union_all
Args: [list(Il,Is), Ils]
Args List singleton  term: nearCoast
Args List many term: [nearCoast]
Atom name: withinArea
Args: [Vessel, nearCoast]
Atom name: =
Args: withinArea(Vessel,nearCoast) and true
Args List singleton  term: Inc
Args List many atom: [Inc]
Atom name: holdsFor
Args: [=(withinArea(Vessel,nearCoast),true), Inc]
Args List singleton  term: Vessel
Atom name: anchoredOrMoored
Args: [Vessel]
Atom name: =
Args: anchoredOrMoored(Vessel) and true
Args List singleton  term: Iam
Args List many atom: [Iam]
Atom name: holdsFor
Args: [=(anchoredOrMoored(Vessel),true), Iam]
Args List singleton  term: Iam
Args List many term: [Iam]
Args List singleton  term: Ii
Args List many list: [Ii]
Args List many term: [list(Inc,Iam), Ii]
Atom name: relative_complement_all
Args: [Ils, list(Inc,Iam), Ii]
Args List singleton  term: LoiteringTime
Args List many term: [LoiteringTime]
Atom name: thresholds
Args: [loiteringTime, LoiteringTime]
Args List singleton  term: I
Args List many term: [I]
Args List many term: [LoiteringTime, I]
Atom name: intDurGreater
Args: [Ii, LoiteringTime, I]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: pilotOps
Args: [Vessel1, Vessel2]
Atom name: =
Args: pilotOps(Vessel1,Vessel2) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(pilotOps(Vessel1,Vessel2),true), I]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: proximity
Args: [Vessel1, Vessel2]
Atom name: =
Args: proximity(Vessel1,Vessel2) and true
Args List singleton  term: Ip
Args List many atom: [Ip]
Atom name: holdsFor
Args: [=(proximity(Vessel1,Vessel2),true), Ip]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: oneIsPilot
Args: [Vessel1, Vessel2]
Args List singleton  term: Vessel1
Atom name: lowSpeed
Args: [Vessel1]
Atom name: =
Args: lowSpeed(Vessel1) and true
Args List singleton  term: Il1
Args List many atom: [Il1]
Atom name: holdsFor
Args: [=(lowSpeed(Vessel1),true), Il1]
Args List singleton  term: Vessel2
Atom name: lowSpeed
Args: [Vessel2]
Atom name: =
Args: lowSpeed(Vessel2) and true
Args List singleton  term: Il2
Args List many atom: [Il2]
Atom name: holdsFor
Args: [=(lowSpeed(Vessel2),true), Il2]
Args List singleton  term: Vessel1
Atom name: stopped
Args: [Vessel1]
Atom name: =
Args: stopped(Vessel1) and farFromPorts
Args List singleton  term: Is1
Args List many atom: [Is1]
Atom name: holdsFor
Args: [=(stopped(Vessel1),farFromPorts), Is1]
Args List singleton  term: Vessel2
Atom name: stopped
Args: [Vessel2]
Atom name: =
Args: stopped(Vessel2) and farFromPorts
Args List singleton  term: Is2
Args List many atom: [Is2]
Atom name: holdsFor
Args: [=(stopped(Vessel2),farFromPorts), Is2]
Args List singleton  term: Is1
Args List many term: [Is1]
Args List singleton  term: I1b
Args List many list: [I1b]
Atom name: union_all
Args: [list(Il1,Is1), I1b]
Args List singleton  term: Is2
Args List many term: [Is2]
Args List singleton  term: I2b
Args List many list: [I2b]
Atom name: union_all
Args: [list(Il2,Is2), I2b]
Args List singleton  term: Ip
Args List many term: [Ip]
Args List many term: [I2b, Ip]
Args List singleton  term: Ii
Args List many list: [Ii]
Atom name: intersect_all
Args: [list(I1b,I2b,Ip), Ii]
Illegal character '\'
Syntax error at token LISTSTART
Args List singleton  term: nearCoast
Args List many term: [nearCoast]
Atom name: withinArea
Args: [Vessel1, nearCoast]
Atom name: =
Args: withinArea(Vessel1,nearCoast) and true
Args List singleton  term: Iw1
Args List many atom: [Iw1]
Atom name: holdsFor
Args: [=(withinArea(Vessel1,nearCoast),true), Iw1]
Syntax error at token COMMA
Args List singleton  term: nearCoast
Args List many term: [nearCoast]
Atom name: withinArea
Args: [Vessel2, nearCoast]
Atom name: =
Args: withinArea(Vessel2,nearCoast) and true
Args List singleton  term: Iw2
Args List many atom: [Iw2]
Atom name: holdsFor
Args: [=(withinArea(Vessel2,nearCoast),true), Iw2]
Syntax error at token COMMA
Args List singleton  term: Iw2
Args List many term: [Iw2]
Args List singleton  term: I
Args List many list: [I]
Args List many term: [list(Iw1,Iw2), I]
Atom name: relative_complement_all
Args: [Ii, list(Iw1,Iw2), I]
Syntax error at token DOT
Args List singleton  term: AreaType
Args List many term: [AreaType]
Atom name: withinArea
Args: [Vessel, AreaType]
Atom name: =
Args: withinArea(Vessel,AreaType) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(withinArea(Vessel,AreaType),true), T]
Args List singleton  term: AreaID
Args List many term: [AreaID]
Atom name: entersArea
Args: [Vessel, AreaID]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [entersArea(Vessel,AreaID), T]
Args List singleton  term: AreaType
Args List many term: [AreaType]
Atom name: areaType
Args: [AreaID, AreaType]
Args List singleton  term: AreaType
Args List many term: [AreaType]
Atom name: withinArea
Args: [Vessel, AreaType]
Atom name: =
Args: withinArea(Vessel,AreaType) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(withinArea(Vessel,AreaType),true), T]
Args List singleton  term: AreaID
Args List many term: [AreaID]
Atom name: leavesArea
Args: [Vessel, AreaID]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [leavesArea(Vessel,AreaID), T]
Args List singleton  term: AreaType
Args List many term: [AreaType]
Atom name: areaType
Args: [AreaID, AreaType]
Args List singleton  term: AreaType
Args List many term: [AreaType]
Atom name: withinArea
Args: [Vessel, AreaType]
Atom name: =
Args: withinArea(Vessel,AreaType) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(withinArea(Vessel,AreaType),true), T]
Args List singleton  term: Vessel
Atom name: gap_start
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [gap_start(Vessel), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Atom name: =
Args: gap(Vessel) and nearPorts
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(gap(Vessel),nearPorts), T]
Args List singleton  term: Vessel
Atom name: gap_start
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [gap_start(Vessel), T]
Args List singleton  term: nearPorts
Args List many term: [nearPorts]
Atom name: withinArea
Args: [Vessel, nearPorts]
Atom name: =
Args: withinArea(Vessel,nearPorts) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(withinArea(Vessel,nearPorts),true), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Atom name: =
Args: gap(Vessel) and farFromPorts
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(gap(Vessel),farFromPorts), T]
Args List singleton  term: Vessel
Atom name: gap_start
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [gap_start(Vessel), T]
Args List singleton  term: nearPorts
Args List many term: [nearPorts]
Atom name: withinArea
Args: [Vessel, nearPorts]
Atom name: =
Args: withinArea(Vessel,nearPorts) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(withinArea(Vessel,nearPorts),true), T]
Args List singleton  term: Vessel
Atom name: gap
Args: [Vessel]
Atom name: =
Args: gap(Vessel) and _Value
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(gap(Vessel),_Value), T]
Args List singleton  term: Vessel
Atom name: gap_end
Args: [Vessel]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [gap_end(Vessel), T]
Args List singleton  term: Vessel
Atom name: highSpeedNearCoast
Args: [Vessel]
Atom name: =
Args: highSpeedNearCoast(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(highSpeedNearCoast(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: movingSpeed
Args: [Vessel]
Atom name: =
Args: movingSpeed(Vessel) and above
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(movingSpeed(Vessel),above), T]
Args List singleton  term: Vessel
Atom name: nearCoast
Args: [Vessel]
Atom name: =
Args: nearCoast(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(nearCoast(Vessel),true), T]
Args List singleton  term: Vessel
Illegal character '>'
Syntax error at token NUMBER
Args List singleton  term: Vessel
Atom name: highSpeedNearCoast
Args: [Vessel]
Atom name: =
Args: highSpeedNearCoast(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(highSpeedNearCoast(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: movingSpeed
Args: [Vessel]
Atom name: =
Args: movingSpeed(Vessel) and normal
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(movingSpeed(Vessel),normal), T]
Args List singleton  term: Vessel
Atom name: nearCoast
Args: [Vessel]
Atom name: =
Args: nearCoast(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(nearCoast(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: highSpeedNearCoast
Args: [Vessel]
Atom name: =
Args: highSpeedNearCoast(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(highSpeedNearCoast(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: movingSpeed
Args: [Vessel]
Atom name: =
Args: movingSpeed(Vessel) and below
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(movingSpeed(Vessel),below), T]
Args List singleton  term: Vessel
Atom name: nearCoast
Args: [Vessel]
Atom name: =
Args: nearCoast(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: holdsAt
Args: [=(nearCoast(Vessel),true), T]
Args List singleton  term: Vessel
Atom name: drifting
Args: [Vessel]
Atom name: =
Args: drifting(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(drifting(Vessel),true), T]
Args List singleton  term: CoG
Args List many term: [CoG]
Atom name: courseOverGround
Args: [Vessel, CoG]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [courseOverGround(Vessel,CoG), T]
Args List singleton  term: MaxDeviation
Args List many term: [MaxDeviation]
Atom name: threshold
Args: [deviation, MaxDeviation]
Args List singleton  term: Deviation
Args List many term: [Deviation]
Args List many term: [_TrueHeading, Deviation]
Atom name: deviation
Args: [CoG, _TrueHeading, Deviation]
Illegal character '>'
Syntax error at token VAR
Args List singleton  term: Vessel
Atom name: drifting
Args: [Vessel]
Atom name: =
Args: drifting(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(drifting(Vessel),true), T]
Args List singleton  term: CoG
Args List many term: [CoG]
Atom name: courseOverGround
Args: [Vessel, CoG]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [courseOverGround(Vessel,CoG), T]
Args List singleton  term: MaxDeviation
Args List many term: [MaxDeviation]
Atom name: threshold
Args: [deviation, MaxDeviation]
Args List singleton  term: Deviation
Args List many term: [Deviation]
Args List many term: [_TrueHeading, Deviation]
Atom name: deviation
Args: [CoG, _TrueHeading, Deviation]
Illegal character '≤'
Syntax error at token VAR
Args List singleton  term: Vessel
Atom name: trawling
Args: [Vessel]
Atom name: =
Args: trawling(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: initiatedAt
Args: [=(trawling(Vessel),true), T]
Args List singleton  term: TrueHeading
Args List many term: [TrueHeading]
Args List many term: [CoG, TrueHeading]
Args List many term: [Speed, CoG, TrueHeading]
Atom name: velocity
Args: [Vessel, Speed, CoG, TrueHeading]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,CoG,TrueHeading), T]
Args List singleton  term: MaxSpeed
Args List many term: [MaxSpeed]
Args List many term: [MinSpeed, MaxSpeed]
Atom name: trawlingSpeed
Args: [Vessel, MinSpeed, MaxSpeed]
Illegal character '>'
Atom name: =
Args: Speed and MinSpeed
Illegal character '<'
Atom name: =
Args: Speed and MaxSpeed
Args List singleton  term: HeadingDist
Args List many term: [HeadingDist]
Atom name: headingDistribution
Args: [Vessel, HeadingDist]
Illegal character '>'
Args List singleton  term: Vessel
Atom name: trawlingAngle
Args: [Vessel]
Atom name: =
Args: HeadingDist and trawlingAngle(Vessel)
Args List singleton  term: Vessel
Atom name: trawling
Args: [Vessel]
Atom name: =
Args: trawling(Vessel) and true
Args List singleton  term: T
Args List many atom: [T]
Atom name: terminatedAt
Args: [=(trawling(Vessel),true), T]
Args List singleton  term: TrueHeading
Args List many term: [TrueHeading]
Args List many term: [CoG, TrueHeading]
Args List many term: [Speed, CoG, TrueHeading]
Atom name: velocity
Args: [Vessel, Speed, CoG, TrueHeading]
Args List singleton  term: T
Args List many atom: [T]
Atom name: happensAt
Args: [velocity(Vessel,Speed,CoG,TrueHeading), T]
Args List singleton  term: MaxSpeed
Args List many term: [MaxSpeed]
Args List many term: [MinSpeed, MaxSpeed]
Atom name: trawlingSpeed
Args: [Vessel, MinSpeed, MaxSpeed]
Syntax error at token LPAREN
Illegal character '<'
Illegal character ';'
Illegal character '>'
Args List singleton  term: HeadingDist
Args List many term: [HeadingDist]
Atom name: headingDistribution
Args: [Vessel, HeadingDist]
Syntax error at token COMMA
Illegal character '<'
Args List singleton  term: Vessel
Atom name: trawlingMovement
Args: [Vessel]
Atom name: =
Args: trawlingMovement(Vessel) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(trawlingMovement(Vessel),true), I]
Args List singleton  term: Vessel
Atom name: change_in_heading
Args: [Vessel]
Atom name: =
Args: change_in_heading(Vessel) and true
Args List singleton  term: I1
Args List many atom: [I1]
Atom name: holdsFor
Args: [=(change_in_heading(Vessel),true), I1]
Args List singleton  term: fishing
Args List many term: [fishing]
Atom name: withinArea
Args: [Vessel, fishing]
Atom name: =
Args: withinArea(Vessel,fishing) and true
Args List singleton  term: I2
Args List many atom: [I2]
Atom name: holdsFor
Args: [=(withinArea(Vessel,fishing),true), I2]
Args List singleton  term: I2
Args List many term: [I2]
Args List singleton  term: I
Args List many list: [I]
Atom name: intersect_all
Args: [list(I1,I2), I]
Args List singleton  term: Vessel
Atom name: anchoredOrMoored
Args: [Vessel]
Atom name: =
Args: anchoredOrMoored(Vessel) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(anchoredOrMoored(Vessel),true), I]
Args List singleton  term: Vessel
Atom name: stopped
Args: [Vessel]
Atom name: =
Args: stopped(Vessel) and farFromPorts
Args List singleton  term: Isffp
Args List many atom: [Isffp]
Atom name: holdsFor
Args: [=(stopped(Vessel),farFromPorts), Isffp]
Args List singleton  term: anchorage
Args List many term: [anchorage]
Atom name: withinArea
Args: [Vessel, anchorage]
Atom name: =
Args: withinArea(Vessel,anchorage) and true
Args List singleton  term: Iwa
Args List many atom: [Iwa]
Atom name: holdsFor
Args: [=(withinArea(Vessel,anchorage),true), Iwa]
Args List singleton  term: Iwa
Args List many term: [Iwa]
Args List singleton  term: Isa
Args List many list: [Isa]
Atom name: intersect_all
Args: [list(Isffp,Iwa), Isa]
Args List singleton  term: Vessel
Atom name: stopped
Args: [Vessel]
Atom name: =
Args: stopped(Vessel) and nearPorts
Args List singleton  term: Isn
Args List many atom: [Isn]
Atom name: holdsFor
Args: [=(stopped(Vessel),nearPorts), Isn]
Args List singleton  term: Isn
Args List many term: [Isn]
Args List singleton  term: Ii
Args List many list: [Ii]
Atom name: union_all
Args: [list(Isa,Isn), Ii]
Args List singleton  term: Vaorm
Args List many term: [Vaorm]
Atom name: threshold
Args: [vaorm, Vaorm]
Args List singleton  term: I
Args List many term: [I]
Args List many term: [Vaorm, I]
Atom name: intDurGreater
Args: [Ii, Vaorm, I]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: tugging
Args: [Vessel1, Vessel2]
Atom name: =
Args: tugging(Vessel1,Vessel2) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(tugging(Vessel1,Vessel2),true), I]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: close
Args: [Vessel1, Vessel2]
Atom name: =
Args: close(Vessel1,Vessel2) and true
Args List singleton  term: Ic
Args List many atom: [Ic]
Atom name: holdsFor
Args: [=(close(Vessel1,Vessel2),true), Ic]
Args List singleton  term: Vessel1
Atom name: movingSpeed
Args: [Vessel1]
Atom name: =
Args: movingSpeed(Vessel1) and below
Args List singleton  term: Is1
Args List many atom: [Is1]
Atom name: holdsFor
Args: [=(movingSpeed(Vessel1),below), Is1]
Args List singleton  term: Vessel2
Atom name: movingSpeed
Args: [Vessel2]
Atom name: =
Args: movingSpeed(Vessel2) and below
Args List singleton  term: Is2
Args List many atom: [Is2]
Atom name: holdsFor
Args: [=(movingSpeed(Vessel2),below), Is2]
Args List singleton  term: Is2
Args List many term: [Is2]
Args List many term: [Is1, Is2]
Args List singleton  term: I
Args List many list: [I]
Atom name: intersect_all
Args: [list(Ic,Is1,Is2), I]
Args List singleton  term: PilotBoat
Args List many term: [PilotBoat]
Atom name: piloting
Args: [Vessel, PilotBoat]
Atom name: =
Args: piloting(Vessel,PilotBoat) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(piloting(Vessel,PilotBoat),true), I]
Args List singleton  term: Vessel
Args List many term: [Vessel]
Atom name: close
Args: [PilotBoat, Vessel]
Atom name: =
Args: close(PilotBoat,Vessel) and true
Args List singleton  term: Ic
Args List many atom: [Ic]
Atom name: holdsFor
Args: [=(close(PilotBoat,Vessel),true), Ic]
Args List singleton  term: Vessel
Args List many term: [Vessel]
Atom name: approaching
Args: [PilotBoat, Vessel]
Atom name: =
Args: approaching(PilotBoat,Vessel) and true
Args List singleton  term: Ia
Args List many atom: [Ia]
Atom name: holdsFor
Args: [=(approaching(PilotBoat,Vessel),true), Ia]
Args List singleton  term: Vessel
Args List many term: [Vessel]
Atom name: boarding
Args: [PilotBoat, Vessel]
Atom name: =
Args: boarding(PilotBoat,Vessel) and true
Args List singleton  term: Ib
Args List many atom: [Ib]
Atom name: holdsFor
Args: [=(boarding(PilotBoat,Vessel),true), Ib]
Args List singleton  term: PilotBoat
Atom name: navigationalExpert
Args: [PilotBoat]
Atom name: =
Args: navigationalExpert(PilotBoat) and true
Args List singleton  term: In
Args List many atom: [In]
Atom name: holdsFor
Args: [=(navigationalExpert(PilotBoat),true), In]
Args List singleton  term: In
Args List many term: [In]
Args List many term: [Ib, In]
Args List many term: [Ia, Ib, In]
Args List singleton  term: I
Args List many list: [I]
Atom name: intersect_all
Args: [list(Ic,Ia,Ib,In), I]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: rendezVous
Args: [Vessel1, Vessel2]
Atom name: =
Args: rendezVous(Vessel1,Vessel2) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(rendezVous(Vessel1,Vessel2),true), I]
Args List singleton  term: Vessel2
Args List many term: [Vessel2]
Atom name: close
Args: [Vessel1, Vessel2]
Atom name: =
Args: close(Vessel1,Vessel2) and true
Args List singleton  term: Ic
Args List many atom: [Ic]
Atom name: holdsFor
Args: [=(close(Vessel1,Vessel2),true), Ic]
Args List singleton  term: Vessel1
Atom name: stopped
Args: [Vessel1]
Atom name: =
Args: stopped(Vessel1) and true
Args List singleton  term: Is1
Args List many atom: [Is1]
Atom name: holdsFor
Args: [=(stopped(Vessel1),true), Is1]
Args List singleton  term: Vessel1
Atom name: lowSpeed
Args: [Vessel1]
Atom name: =
Args: lowSpeed(Vessel1) and true
Args List singleton  term: Ils1
Args List many atom: [Ils1]
Atom name: holdsFor
Args: [=(lowSpeed(Vessel1),true), Ils1]
Args List singleton  term: Vessel2
Atom name: stopped
Args: [Vessel2]
Atom name: =
Args: stopped(Vessel2) and true
Args List singleton  term: Is2
Args List many atom: [Is2]
Atom name: holdsFor
Args: [=(stopped(Vessel2),true), Is2]
Args List singleton  term: Vessel2
Atom name: lowSpeed
Args: [Vessel2]
Atom name: =
Args: lowSpeed(Vessel2) and true
Args List singleton  term: Ils2
Args List many atom: [Ils2]
Atom name: holdsFor
Args: [=(lowSpeed(Vessel2),true), Ils2]
Args List singleton  term: Ils1
Args List many term: [Ils1]
Args List singleton  term: I1
Args List many list: [I1]
Atom name: union_all
Args: [list(Is1,Ils1), I1]
Args List singleton  term: Ils2
Args List many term: [Ils2]
Args List singleton  term: I2
Args List many list: [I2]
Atom name: union_all
Args: [list(Is2,Ils2), I2]
Args List singleton  term: I2
Args List many term: [I2]
Args List singleton  term: Ii
Args List many list: [Ii]
Atom name: intersect_all
Args: [list(I1,I2), Ii]
Args List singleton  term: Ii
Args List many term: [Ii]
Args List singleton  term: I
Args List many list: [I]
Atom name: intersect_all
Args: [list(Ic,Ii), I]
Args List singleton  term: Vessel
Atom name: loitering
Args: [Vessel]
Atom name: =
Args: loitering(Vessel) and true
Args List singleton  term: I
Args List many atom: [I]
Atom name: holdsFor
Args: [=(loitering(Vessel),true), I]
Args List singleton  term: Area
Args List many term: [Area]
Atom name: withinArea
Args: [Vessel, Area]
Atom name: =
Args: withinArea(Vessel,Area) and true
Args List singleton  term: Iwa
Args List many atom: [Iwa]
Atom name: holdsFor
Args: [=(withinArea(Vessel,Area),true), Iwa]
Args List singleton  term: Vloiter
Args List many term: [Vloiter]
Atom name: threshold
Args: [vloiter, Vloiter]
Args List singleton  term: I
Args List many term: [I]
Args List many term: [Vloiter, I]
Atom name: intDurGreater
Args: [Iwa, Vloiter, I]
Event Description 1: 
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).

holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).


Event Description 2: 
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.


Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.0625 1.    ]
 [1.     0.25  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.15625
Distance between rules: 
0.10416666666666666

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.25]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.25
Distance between rules: 
0.5

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.25]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.25
Distance between rules: 
0.5

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.0625 1.    ]
 [1.     0.25  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.15625
Distance between rules: 
0.10416666666666666

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.41666666666666663

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,Area),T), areaType(Area,AreaType)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.015625
[happensAt(gap_start(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.421875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.015625
[happensAt(gap_start(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0078125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0. 0.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.35416666666666663

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1.    1.   ]
 [0.125 1.   ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.5625
Distance between rules: 
0.7083333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1.     1.    ]
 [0.125  0.0625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.53125
Distance between rules: 
0.6875

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0. 0.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.35416666666666663

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1.      1.     ]
 [1.      0.03125]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.03125
Distance between rule bodies: 
0.515625
Distance between rules: 
0.6770833333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(gap_end(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.03125

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.0625
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.125
Distance between rules: 
0.10416666666666666

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1.    1.   ]
 [0.125 1.   ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.5625
Distance between rules: 
0.7083333333333333

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1.     1.    ]
 [0.125  0.0625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.53125
Distance between rules: 
0.6875

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.0625
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.125
Distance between rules: 
0.10416666666666666

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1.      1.     ]
 [1.      0.03125]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.03125
Distance between rule bodies: 
0.515625
Distance between rules: 
0.6770833333333333

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(stop_end(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(stop_end(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(stop_end(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.125
[happensAt(stop_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.125
[happensAt(stop_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(stop_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_start(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(slow_motion_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(slow_motion_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_start(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_end(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_end(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(slow_motion_end(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(slow_motion_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(slow_motion_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_start(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(change_in_speed_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(change_in_speed_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_start(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_start(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_end(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_end(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(change_in_speed_end(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(change_in_speed_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_speed_end(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25     1.       0.       0.      ]
 [1.       1.       0.       0.      ]
 [1.       1.       0.       0.      ]
 [1.       0.015625 0.       0.      ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
0.265625
Distance between rule bodies: 
0.56640625
Distance between rules: 
0.478125

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   0.5  0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 1 2]
Sum of distances for optimal body condition assignment: 
0.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.5750000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1.    1.    0.    0.   ]
 [1.    1.    0.    0.   ]
 [1.    0.5   0.    0.   ]
 [0.125 1.    0.    0.   ]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
0.625
Distance between rule bodies: 
0.65625
Distance between rules: 
0.7250000000000001

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1.     1.     0.     0.    ]
 [1.     1.     0.     0.    ]
 [1.     1.     0.     0.    ]
 [0.125  0.0625 0.     0.    ]]
Optimal Body Condition Assignment: 
[2 3 0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.7232142857142857

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), -(inRange(Speed,0,HcNearCoastMax)), holdsAt(=(withinArea(Vessel,nearCoast),true),T)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
3
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.8571428571428571

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax), _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(hcNearCoastMax,HcNearCoastMax), inRange(Speed,0,HcNearCoastMax)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(gap_start(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[happensAt(gap_end(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
5
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.7321428571428571

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _]
5
3
Body atom distances: 
[[1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min), _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _]
5
4
Body atom distances: 
[[1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[4 1 0 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
5
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min), _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _]
5
3
Body atom distances: 
[[1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,_Max,_Avg), thresholds(movingMin,MovingMin), inRange(Speed,MovingMin,Min)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.7321428571428571

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,Min,Max,_Avg), inRange(Speed,Min,Max)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.7321428571428571

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), vesselType(Vessel,Type), typeSpeed(Type,_Min,Max,_Avg), inRange(Speed,Max,inf)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   0.5  0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.75
Distance between rule bodies: 
0.5833333333333333
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _]
3
2
Body atom distances: 
[[1.  1.  0. ]
 [1.  1.  0. ]
 [1.  0.5 0. ]]
Optimal Body Condition Assignment: 
[2 0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.65625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.78125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
3
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.8571428571428571

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf)), _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(movingMin,MovingMin), -(inRange(Speed,MovingMin,inf))]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[0.125 0.375 1.    0.   ]
 [0.375 0.125 1.    0.   ]
 [0.375 0.375 1.    0.   ]
 [1.    1.    1.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 3 2]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.5625
Distance between rules: 
0.4625

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0.0625
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[0.375 0.375 1.    0.375 1.    1.    1.   ]
 [0.375 0.375 1.    0.375 1.    1.    1.   ]
 [0.375 0.375 1.    0.375 1.    1.    1.   ]
 [1.    1.    1.    1.    0.5   1.    1.   ]
 [0.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 3 4 2 5 6]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.6607142857142857
Distance between rules: 
0.5859375

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[0.375   0.28125 0.28125 1.     ]
 [0.375   0.34375 0.34375 1.     ]
 [0.375   0.34375 0.34375 1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[1 2 0 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.41250000000000003

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[0.375 0.375 0.375 0.375 1.   ]
 [0.375 0.375 0.375 0.375 1.   ]
 [0.375 0.375 0.375 0.375 1.   ]
 [1.    1.    1.    1.    1.   ]
 [0.    0.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.125
Distance between rule bodies: 
0.625
Distance between rules: 
0.53125

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0.0625
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[0.375 0.375 0.375 0.375 0.375 1.    1.    1.    1.   ]
 [0.375 0.375 0.375 0.375 0.375 1.    1.    1.    1.   ]
 [0.375 0.375 0.375 0.375 0.375 1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    0.5   0.5   1.    1.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.   ]
 [0.    0.    0.    0.    0.    0.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[0 1 2 5 3 4 6 7 8]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.736111111111111
Distance between rules: 
0.66875

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0.0625
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[0.375 1.    1.    0.   ]
 [0.375 1.    1.    0.   ]
 [0.375 1.    1.    0.   ]
 [1.    1.    1.    0.   ]]
Optimal Body Condition Assignment: 
[3 0 2 1]
Sum of distances for optimal body condition assignment: 
2.375
Distance between rule bodies: 
0.84375
Distance between rules: 
0.6875

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(movingSpeed(Vessel),below),I1), holdsFor(=(movingSpeed(Vessel),normal),I2), holdsFor(=(movingSpeed(Vessel),above),I3), union_all(list(I1,I2,I3),I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0.0625 1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     0.5    0.5    1.     0.5   ]
 [0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
2.5625
Distance between rule bodies: 
0.7604166666666666
Distance between rules: 
0.7946428571428571

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T), absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff), thresholds(adriftAngThr,AdriftAngThr), =(AngleDiff,AdriftAngThr)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.09375 1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.09375
Distance between rule bodies: 
0.8489583333333333
Distance between rules: 
0.8705357142857142

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _]
7
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _, _]
7
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel)), _]
7
6
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[6 1 0 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _, _, _]
7
3
Body atom distances: 
[[0.375    0.375    1.       0.       0.       0.       0.      ]
 [0.3125   0.265625 1.       0.       0.       0.       0.      ]
 [1.       1.       0.375    0.       0.       0.       0.      ]
 [0.375    0.375    1.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.      ]]
Optimal Body Condition Assignment: 
[3 1 2 0 4 5 6]
Sum of distances for optimal body condition assignment: 
1.015625
Distance between rule bodies: 
0.7165178571428571
Distance between rules: 
0.634765625

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
7
Body atom distances: 
[[0.25       0.375      1.         0.3125     1.         1.
  1.        ]
 [0.375      0.25       1.         0.375      1.         1.
  1.        ]
 [1.         1.         0.375      1.         1.         1.
  1.        ]
 [0.3125     0.375      1.         0.25       1.         1.
  1.        ]
 [1.         1.         1.         1.         0.125      1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.4166666666666665
Distance between rule bodies: 
0.3452380952380952
Distance between rules: 
0.30208333333333326

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _, _, _]
7
4
Body atom distances: 
[[0.375  0.375  0.375  1.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.    ]
 [1.     1.     1.     0.5    0.     0.     0.    ]
 [0.375  0.375  0.375  1.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[1 0 3 2 5 4 6]
Sum of distances for optimal body condition assignment: 
1.5625
Distance between rule bodies: 
0.6517857142857143
Distance between rules: 
0.578125

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I), _, _]
7
5
Body atom distances: 
[[0.375  0.375  0.375  0.375  1.     0.     0.    ]
 [0.3125 0.0625 0.3125 0.3125 1.     0.     0.    ]
 [1.     1.     1.     1.     0.5    0.     0.    ]
 [0.375  0.375  0.375  0.375  1.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.    ]]
Optimal Body Condition Assignment: 
[3 1 4 2 5 6 0]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.6160714285714285
Distance between rules: 
0.5468749999999999

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
7
Body atom distances: 
[[0.375   0.34375 0.375   0.34375 0.375   1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      0.375   0.375  ]
 [0.375   0.34375 0.375   0.34375 0.375   1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      0.375   0.375   1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[1 0 7 3 5 2 4 6 8]
Sum of distances for optimal body condition assignment: 
3.75
Distance between rule bodies: 
0.6388888888888888
Distance between rules: 
0.58125

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0.0625
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _, _, _]
7
3
Body atom distances: 
[[0.375      1.         1.         0.         0.         0.
  0.        ]
 [0.265625   1.         1.         0.         0.         0.
  0.        ]
 [1.         1.         1.         0.         0.         0.
  0.        ]
 [0.375      1.         1.         0.         0.         0.
  0.        ]
 [1.         1.         1.         0.         0.         0.
  0.        ]
 [1.         1.         1.         0.         0.         0.
  0.        ]
 [1.         1.         0.33333333 0.         0.         0.
  0.        ]]
Optimal Body Condition Assignment: 
[3 0 5 6 4 1 2]
Sum of distances for optimal body condition assignment: 
1.5989583333333333
Distance between rule bodies: 
0.7998511904761904
Distance between rules: 
0.7076822916666665

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(stopped(Vessel),farFromPorts),Istfp), holdsFor(=(withinArea(Vessel,anchorage),true),Ia), intersect_all(list(Istfp,Ia),Ista), holdsFor(=(stopped(Vessel),nearPorts),Istnp), union_all(list(Ista,Istnp),Ii), thresholds(aOrMTime,AOrMTime), intDurGreater(Ii,AOrMTime,I)]
[_, _, _, _, _, _, _]
7
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.7232142857142857

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), inRange(Speed,TuggingMin,TuggingMax)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   0.5  0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
0.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1.  1.  0.  0. ]
 [1.  1.  0.  0. ]
 [1.  1.  0.  0. ]
 [1.  0.5 0.  0. ]]
Optimal Body Condition Assignment: 
[2 3 0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.7125

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax)), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.8571428571428571

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax)), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax)), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax)), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(tuggingMin,TuggingMin), thresholds(tuggingMax,TuggingMax), -(inRange(Speed,TuggingMin,TuggingMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _]
9
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 8 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _, _]
9
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 8 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _, _]
9
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 7 8 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _, _]
9
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 8 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _, _]
9
2
Body atom distances: 
[[1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  0.5 0.  0.  0.  0.  0.  0.  0. ]
 [1.  0.5 0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[2 3 1 5 6 7 8 4 0]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _, _]
9
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 7 8 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _, _, _, _, _]
9
2
Body atom distances: 
[[1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  0.5 0.  0.  0.  0.  0.  0.  0. ]
 [1.  0.5 0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]
 [1.  1.  0.  0.  0.  0.  0.  0.  0. ]]
Optimal Body Condition Assignment: 
[2 3 1 5 6 7 8 4 0]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _, _, _, _]
9
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 8 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel)), _, _, _]
9
6
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[6 7 8 3 0 1 2 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _, _]
9
3
Body atom distances: 
[[0.3125 0.3125 1.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.3125 1.     0.     0.     0.     0.     0.     0.    ]
 [0.3125 0.3125 1.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     0.5    0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     0.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[3 4 5 6 0 1 2 7 8]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.7916666666666666
Distance between rules: 
0.71875

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I), _, _]
9
7
Body atom distances: 
[[0.375      0.3125     1.         0.375      1.         1.
  1.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.         0.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         0.         0.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         0.         0.        ]
 [1.         1.         0.5        1.         1.         1.
  1.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.         0.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667 0.         0.        ]]
Optimal Body Condition Assignment: 
[1 8 7 4 0 3 2 5 6]
Sum of distances for optimal body condition assignment: 
3.7291666666666665
Distance between rule bodies: 
0.636574074074074
Distance between rules: 
0.5791666666666666

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _, _, _, _, _]
9
4
Body atom distances: 
[[0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     0.375  0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[2 5 6 7 1 0 3 8 4]
Sum of distances for optimal body condition assignment: 
1.4375
Distance between rule bodies: 
0.7152777777777778
Distance between rules: 
0.64375

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I), _, _, _, _]
9
5
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.5    0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[2 6 7 8 3 0 4 5 1]
Sum of distances for optimal body condition assignment: 
2.4375
Distance between rule bodies: 
0.7152777777777778
Distance between rules: 
0.65

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
9
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.25   0.5   ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 5 2 3 4 1 7 6 8]
Sum of distances for optimal body condition assignment: 
6.1875
Distance between rule bodies: 
0.6875
Distance between rules: 
0.625

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0.0625
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _, _, _, _, _]
9
3
Body atom distances: 
[[0.3125     1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [0.3125     1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [0.3125     1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.         0.        ]
 [1.         1.         0.33333333 0.         0.         0.
  0.         0.         0.        ]]
Optimal Body Condition Assignment: 
[3 4 5 6 7 0 8 1 2]
Sum of distances for optimal body condition assignment: 
1.6458333333333333
Distance between rule bodies: 
0.849537037037037
Distance between rules: 
0.7708333333333334

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(proximity(Vessel1,Vessel2),true),Ip), oneIsTug(Vessel1,Vessel2), -(oneIsPilot(Vessel1,Vessel2)), -(twoAreTugs(Vessel1,Vessel2)), holdsFor(=(tuggingSpeed(Vessel1),true),Its1), holdsFor(=(tuggingSpeed(Vessel2),true),Its2), intersect_all(list(Ip,Its1,Its2),Ii), thresholds(tuggingTime,TuggingTime), intDurGreater(Ii,TuggingTime,I)]
[_, _, _, _, _, _, _, _, _]
9
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.71875

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_start(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
5
2
Body atom distances: 
[[0.25     1.       0.       0.       0.      ]
 [1.       1.       0.       0.       0.      ]
 [1.       1.       0.       0.       0.      ]
 [1.       1.       0.       0.       0.      ]
 [1.       0.015625 0.       0.       0.      ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
0.265625
Distance between rule bodies: 
0.6531250000000001
Distance between rules: 
0.5651041666666667

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
5
2
Body atom distances: 
[[0.25 1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.7291666666666666

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_end(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[0.25 0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8500000000000001
Distance between rules: 
0.875

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _]
5
2
Body atom distances: 
[[1.    1.    0.    0.    0.   ]
 [1.    1.    0.    0.    0.   ]
 [1.    1.    0.    0.    0.   ]
 [1.    1.    0.    0.    0.   ]
 [0.125 1.    0.    0.    0.   ]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.8250000000000001
Distance between rules: 
0.8541666666666666

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _]
5
2
Body atom distances: 
[[1.     1.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.    ]
 [1.     1.     0.     0.     0.    ]
 [0.125  0.0625 0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[2 3 4 0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.8125
Distance between rules: 
0.84375

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
5
Body atom distances: 
[[0.03125 1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
4.03125
Distance between rule bodies: 
0.8385416666666666
Distance between rules: 
0.7276785714285714

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _]
5
3
Body atom distances: 
[[1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _]
5
4
Body atom distances: 
[[1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]
 [1. 1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[4 1 0 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
5
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _]
5
3
Body atom distances: 
[[1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]
 [1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), inRange(Speed,TrawlspeedMin,TrawlspeedMax), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.8500000000000001

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[0.25 1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   1.   0.   0.  ]
 [1.   0.5  0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
0.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[0.25 0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]
 [1.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1.  1.  0.  0. ]
 [1.  1.  0.  0. ]
 [1.  1.  0.  0. ]
 [1.  0.5 0.  0. ]]
Optimal Body Condition Assignment: 
[2 3 0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.7125

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax)), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[0.03125 1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.     ]
 [0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.03125
Distance between rule bodies: 
0.8385416666666666
Distance between rules: 
0.8616071428571428

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax)), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax)), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax)), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]
 [1. 1. 1. 0.]]
Optimal Body Condition Assignment: 
[3 1 0 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_Heading,_),T), thresholds(trawlspeedMin,TrawlspeedMin), thresholds(trawlspeedMax,TrawlspeedMax), -(inRange(Speed,TrawlspeedMin,TrawlspeedMax))]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25     1.      ]
 [1.       0.015625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.265625
Distance between rule bodies: 
0.1328125
Distance between rules: 
0.13020833333333331

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1.    1.   ]
 [0.125 1.   ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.5625
Distance between rules: 
0.7083333333333333

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1.     1.    ]
 [0.125  0.0625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.53125
Distance between rules: 
0.6875

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
2
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
2
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), holdsAt(=(withinArea(Vessel,fishing),true),T)]
[_, _]
2
0
Body atom distances: 
[[0. 0.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 fi(=(trawlingMovement(Vessel),true),=(trawlingMovement(Vessel),false),TrawlingCrs) :- 
	thresholds(trawlingCrs,TrawlingCrs).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[thresholds(trawlingCrs,TrawlingCrs)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(gap_start(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[happensAt(gap_end(Vessel),T), _, _, _, _]
5
1
Body atom distances: 
[[1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _]
5
2
Body atom distances: 
[[1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]
 [1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I), _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
5
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _]
5
3
Body atom distances: 
[[0.3125 0.3125 1.     0.     0.    ]
 [0.3125 0.3125 1.     0.     0.    ]
 [1.     1.     0.375  0.     0.    ]
 [1.     1.     1.     0.     0.    ]
 [1.     1.     1.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.6000000000000001
Distance between rules: 
0.5104166666666667

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I), _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
5
Body atom distances: 
[[0.375      0.3125     1.         0.375      1.         1.
  1.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.        ]
 [1.         1.         0.375      1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]]
Optimal Body Condition Assignment: 
[1 0 2 3 6 4 5]
Sum of distances for optimal body condition assignment: 
2.2291666666666665
Distance between rule bodies: 
0.6041666666666665
Distance between rules: 
0.5364583333333333

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _]
5
4
Body atom distances: 
[[0.3125 0.375  0.375  1.     0.    ]
 [0.3125 0.375  0.375  1.     0.    ]
 [1.     1.     1.     0.5    0.    ]
 [1.     1.     1.     1.     0.    ]
 [1.     1.     1.     1.     0.    ]]
Optimal Body Condition Assignment: 
[2 0 3 4 1]
Sum of distances for optimal body condition assignment: 
2.1875
Distance between rule bodies: 
0.6375000000000001
Distance between rules: 
0.5416666666666667

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
5
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 1.    ]
 [0.3125 0.3125 0.3125 0.3125 1.    ]
 [1.     1.     1.     1.     0.5   ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 4 2 3]
Sum of distances for optimal body condition assignment: 
3.125
Distance between rule bodies: 
0.625
Distance between rules: 
0.53125

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I), _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
5
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.125  0.375 ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 7 2 3 4 5 6 8]
Sum of distances for optimal body condition assignment: 
2.75
Distance between rule bodies: 
0.75
Distance between rules: 
0.68125

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0.0625
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _]
5
3
Body atom distances: 
[[0.3125     1.         1.         0.         0.        ]
 [0.3125     1.         1.         0.         0.        ]
 [1.         1.         1.         0.         0.        ]
 [1.         1.         1.         0.         0.        ]
 [1.         1.         0.33333333 0.         0.        ]]
Optimal Body Condition Assignment: 
[3 0 4 1 2]
Sum of distances for optimal body condition assignment: 
1.6458333333333333
Distance between rule bodies: 
0.7291666666666666
Distance between rules: 
0.6180555555555555

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(trawlSpeed(Vessel),true),It), holdsFor(=(trawlingMovement(Vessel),true),Itc), intersect_all(list(It,Itc),Ii), thresholds(trawlingTime,TrawlingTime), intDurGreater(Ii,TrawlingTime,I)]
[_, _, _, _, _]
5
0
Body atom distances: 
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
3
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.7232142857142857

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf), _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,SarMinSpeed,inf)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[0.25 1.   0.  ]
 [1.   1.   0.  ]
 [1.   1.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.8125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[0.25 0.   0.  ]
 [1.   0.   0.  ]
 [1.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.765625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.765625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
3
Body atom distances: 
[[0. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.8333333333333333
Distance between rules: 
0.8571428571428571

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
3
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
3
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed), _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
3
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,_,_),T), thresholds(sarMinSpeed,SarMinSpeed), inRange(Speed,0,SarMinSpeed)]
[_, _, _]
3
0
Body atom distances: 
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(change_in_heading(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(change_in_heading(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(change_in_heading(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(change_in_heading(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _, _, _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
1
Body atom distances: 
[[1. 1. 1. 1.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _, _, _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _, _, _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[happensAt(change_in_heading(Vessel),T)]
[_]
1
0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(gap_start(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[happensAt(gap_end(Vessel),T), _, _, _]
4
1
Body atom distances: 
[[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _]
4
2
Body atom distances: 
[[1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]
 [1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I), _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
4
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _]
4
3
Body atom distances: 
[[0.3125 0.3125 1.     0.    ]
 [0.3125 0.3125 1.     0.    ]
 [1.     1.     0.375  0.    ]
 [1.     1.     1.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.41250000000000003

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0.0625
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I), _, _, _]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I)]
7
4
Body atom distances: 
[[0.375      0.3125     1.         0.375      1.         1.
  1.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.        ]
 [1.         1.         0.375      1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]
 [0.         0.         0.         0.         0.         0.
  0.        ]]
Optimal Body Condition Assignment: 
[1 0 2 6 3 4 5]
Sum of distances for optimal body condition assignment: 
1.2291666666666667
Distance between rule bodies: 
0.6041666666666666
Distance between rules: 
0.5364583333333333

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I)]
4
4
Body atom distances: 
[[0.3125 0.375  0.375  1.    ]
 [0.3125 0.375  0.375  1.    ]
 [1.     1.     1.     0.5   ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 3 2]
Sum of distances for optimal body condition assignment: 
2.1875
Distance between rule bodies: 
0.546875
Distance between rules: 
0.45

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I), _]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I)]
5
4
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 1.    ]
 [0.3125 0.3125 0.3125 0.3125 1.    ]
 [1.     1.     1.     1.     0.5   ]
 [1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 4 2 3]
Sum of distances for optimal body condition assignment: 
2.125
Distance between rule bodies: 
0.625
Distance between rules: 
0.53125

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0.0625
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I), _, _, _, _, _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
4
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [0.3125 0.3125 0.3125 0.3125 0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.125  0.375 ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[0 1 7 2 3 4 5 6 8]
Sum of distances for optimal body condition assignment: 
1.75
Distance between rule bodies: 
0.75
Distance between rules: 
0.68125

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0.0625
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _]
4
3
Body atom distances: 
[[0.3125     1.         1.         0.        ]
 [0.3125     1.         1.         0.        ]
 [1.         1.         1.         0.        ]
 [1.         1.         0.33333333 0.        ]]
Optimal Body Condition Assignment: 
[3 0 1 2]
Sum of distances for optimal body condition assignment: 
1.6458333333333333
Distance between rule bodies: 
0.6614583333333333
Distance between rules: 
0.5416666666666666

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(sarSpeed(Vessel),true),Iss), holdsFor(=(sarMovement(Vessel),true),Isc), intersect_all(list(Iss,Isc),Ii), intDurGreater(Ii,3600,I)]
[_, _, _, _]
4
0
Body atom distances: 
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _]
8
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _, _, _]
8
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(gap_start(Vessel),T), _, _, _, _, _, _, _]
8
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 7 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _, _, _]
8
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _, _, _]
8
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(gap_end(Vessel),T), _, _, _, _, _, _, _]
8
1
Body atom distances: 
[[1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 3 4 5 6 7 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _, _, _, _]
8
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _, _, _]
8
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 6 7 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel)), _, _]
8
6
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]
 [1. 1. 1. 1. 1. 1. 0. 0.]]
Optimal Body Condition Assignment: 
[6 7 2 0 1 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(trawlingMovement(Vessel),true),I) :- 
	holdsFor(=(change_in_heading(Vessel),true),I1),
	holdsFor(=(withinArea(Vessel,fishing),true),I2),
	intersect_all(list(I1,I2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsFor(=(change_in_heading(Vessel),true),I1), holdsFor(=(withinArea(Vessel,fishing),true),I2), intersect_all(list(I1,I2),I), _, _, _, _, _]
8
3
Body atom distances: 
[[0.3125   0.3125   1.       0.       0.       0.       0.       0.      ]
 [0.375    0.375    1.       0.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.       0.      ]
 [0.3125   0.265625 1.       0.       0.       0.       0.       0.      ]
 [0.3125   0.3125   1.       0.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.       0.      ]
 [1.       1.       1.       0.       0.       0.       0.       0.      ]]
Optimal Body Condition Assignment: 
[3 4 5 1 0 6 7 2]
Sum of distances for optimal body condition assignment: 
1.578125
Distance between rule bodies: 
0.822265625
Distance between rules: 
0.7378472222222222

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Distance between rule heads: 
0.0625
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsFor(=(stopped(Vessel),farFromPorts),Isffp), holdsFor(=(withinArea(Vessel,anchorage),true),Iwa), intersect_all(list(Isffp,Iwa),Isa), holdsFor(=(stopped(Vessel),nearPorts),Isn), union_all(list(Isa,Isn),Ii), threshold(vaorm,Vaorm), intDurGreater(Ii,Vaorm,I), _]
8
7
Body atom distances: 
[[0.375      0.3125     1.         0.375      1.         1.
  1.         0.        ]
 [0.25       0.375      1.         0.3125     1.         1.
  1.         0.        ]
 [1.         1.         1.         1.         0.375      1.
  1.         0.        ]
 [0.375      0.265625   1.         0.375      1.         1.
  1.         0.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.        ]
 [1.         1.         1.         1.         1.         1.
  1.         0.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667 0.        ]]
Optimal Body Condition Assignment: 
[3 0 4 1 7 5 2 6]
Sum of distances for optimal body condition assignment: 
3.432291666666667
Distance between rule bodies: 
0.5540364583333334
Distance between rules: 
0.4994212962962963

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(movingSpeed(Vessel1),below),Is1),
	holdsFor(=(movingSpeed(Vessel2),below),Is2),
	intersect_all(list(Ic,Is1,Is2),I).

Distance between rule heads: 
0.0625
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(movingSpeed(Vessel1),below),Is1), holdsFor(=(movingSpeed(Vessel2),below),Is2), intersect_all(list(Ic,Is1,Is2),I), _, _, _, _]
8
4
Body atom distances: 
[[0.3125 0.375  0.375  1.     0.     0.     0.     0.    ]
 [0.375  0.375  0.375  1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.    ]
 [0.3125 0.375  0.375  1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.    ]
 [1.     1.     1.     1.     0.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[4 1 6 2 0 7 5 3]
Sum of distances for optimal body condition assignment: 
2.0625
Distance between rule bodies: 
0.7578125
Distance between rules: 
0.6805555555555555

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(piloting(Vessel,PilotBoat),true),I) :- 
	holdsFor(=(close(PilotBoat,Vessel),true),Ic),
	holdsFor(=(approaching(PilotBoat,Vessel),true),Ia),
	holdsFor(=(boarding(PilotBoat,Vessel),true),Ib),
	holdsFor(=(navigationalExpert(PilotBoat),true),In),
	intersect_all(list(Ic,Ia,Ib,In),I).

Distance between rule heads: 
0.0625
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsFor(=(close(PilotBoat,Vessel),true),Ic), holdsFor(=(approaching(PilotBoat,Vessel),true),Ia), holdsFor(=(boarding(PilotBoat,Vessel),true),Ib), holdsFor(=(navigationalExpert(PilotBoat),true),In), intersect_all(list(Ic,Ia,Ib,In),I), _, _, _]
8
5
Body atom distances: 
[[0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.    ]
 [0.375  0.375  0.375  0.375  1.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.    ]
 [0.3125 0.3125 0.3125 0.3125 1.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.    ]
 [1.     1.     1.     1.     1.     0.     0.     0.    ]]
Optimal Body Condition Assignment: 
[2 1 7 3 0 5 6 4]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.6640625
Distance between rules: 
0.5972222222222222

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(close(Vessel1,Vessel2),true),Ic),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel1),true),Ils1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	holdsFor(=(lowSpeed(Vessel2),true),Ils2),
	union_all(list(Is1,Ils1),I1),
	union_all(list(Is2,Ils2),I2),
	intersect_all(list(I1,I2),Ii),
	intersect_all(list(Ic,Ii),I).

Distance between rule heads: 
0.0625
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I), _]
[holdsFor(=(close(Vessel1,Vessel2),true),Ic), holdsFor(=(stopped(Vessel1),true),Is1), holdsFor(=(lowSpeed(Vessel1),true),Ils1), holdsFor(=(stopped(Vessel2),true),Is2), holdsFor(=(lowSpeed(Vessel2),true),Ils2), union_all(list(Is1,Ils1),I1), union_all(list(Is2,Ils2),I2), intersect_all(list(I1,I2),Ii), intersect_all(list(Ic,Ii),I)]
9
8
Body atom distances: 
[[0.3125  0.3125  0.28125 0.3125  0.28125 1.      1.      1.      1.     ]
 [0.375   0.34375 0.375   0.34375 0.375   1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      0.375   0.375   1.      1.     ]
 [0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  0.3125  0.3125  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.      0.      0.      0.      0.      0.      0.      0.      0.     ]]
Optimal Body Condition Assignment: 
[2 1 5 0 3 4 6 7 8]
Sum of distances for optimal body condition assignment: 
4.625
Distance between rule bodies: 
0.625
Distance between rules: 
0.56875

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _, _, _, _]
8
3
Body atom distances: 
[[0.3125     1.         1.         0.         0.         0.
  0.         0.        ]
 [0.375      1.         1.         0.         0.         0.
  0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.        ]
 [0.265625   1.         1.         0.         0.         0.
  0.         0.        ]
 [0.3125     1.         1.         0.         0.         0.
  0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.        ]
 [1.         1.         1.         0.         0.         0.
  0.         0.        ]
 [1.         1.         0.33333333 0.         0.         0.
  0.         0.        ]]
Optimal Body Condition Assignment: 
[3 4 5 0 7 6 1 2]
Sum of distances for optimal body condition assignment: 
1.5989583333333333
Distance between rule bodies: 
0.8248697916666666
Distance between rules: 
0.7332175925925926

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Distance between rule heads: 
1
[holdsFor(=(lowSpeed(Vessel),true),Il), holdsFor(=(stopped(Vessel),farFromPorts),Is), union_all(list(Il,Is),Ils), holdsFor(=(withinArea(Vessel,nearCoast),true),Inc), holdsFor(=(anchoredOrMoored(Vessel),true),Iam), relative_complement_all(Ils,list(Inc,Iam),Ii), thresholds(loiteringTime,LoiteringTime), intDurGreater(Ii,LoiteringTime,I)]
[_, _, _, _, _, _, _, _]
8
0
Body atom distances: 
[[0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Rule distances: 
[[0.10416667 0.5        0.75       ... 1.         1.         1.        ]
 [0.5        0.10416667 0.41666667 ... 1.         1.         1.        ]
 [0.75       0.421875   0.0078125  ... 1.         1.         1.        ]
 ...
 [0.4375     0.75       0.625      ... 1.         1.         1.        ]
 [1.         1.         1.         ... 1.         1.         1.        ]
 [1.         1.         1.         ... 1.         1.         1.        ]]
Optimal Rule Assignment: 
[ 0  1  2  3  4  5  7 18 30 25 22 19 34  8 35 15 16 17  6 11 20 21 10 23
 24 12 26 27 28 29 14 31 32 33  9 13]
Sum of distances for optimal rule assignment: 
26.27824900793651
Distance between event descriptions: 
0.7299513613315697
Event Description Similarity: 
0.2700486386684303
